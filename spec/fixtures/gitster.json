[
    {
        "id": "2649612065",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 602242519,
            "size": 1,
            "distinct_size": 0,
            "ref": "refs/heads/dj/log-graph-with-no-walk",
            "head": "13b25381673c5791764976626a130b090d51bab3",
            "before": "ad5cb20b9c135be9d72e4a51b29e33794f7479f7",
            "commits": [
                {
                    "sha": "13b25381673c5791764976626a130b090d51bab3",
                    "author": {
                        "email": "dongcan.jiang@gmail.com",
                        "name": "Dongcan Jiang"
                    },
                    "message": "revision: forbid combining --graph and --no-walk\n\nBecause \"--graph\" is about connected history while --no-walk is\nabout discrete points, it does not make sense to allow these two\noptions at the same time. [1]\n\nThis change makes a few calls to \"show --graph\" fail in t4052, but\nasking to show one commit with graph is a nonsensical thing to do.\nThus, tests on \"show --graph\" in t4052 have been removed [2,3].\nSame tests on \"show\" without --graph option have already been tested\nin 4052.\n\n3 testcases have been added to test this patch.\n\n[1]: http://article.gmane.org/gmane.comp.version-control.git/216083\n[2]: http://article.gmane.org/gmane.comp.version-control.git/264950\n[3]: http://article.gmane.org/gmane.comp.version-control.git/265107\n\nHelped-By: Eric Sunshine <sunshine@sunshineco.com>\nHelped-By: René Scharfe <l.s.r@web.de>\nHelped-By: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: Dongcan Jiang <dongcan.jiang@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/13b25381673c5791764976626a130b090d51bab3"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-15T03:08:36Z"
    },
    {
        "id": "2649612062",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 602242517,
            "size": 33,
            "distinct_size": 17,
            "ref": "refs/heads/pu",
            "head": "1d9a75997446e07ead2ea7feb93932bdd196ddeb",
            "before": "69a3822a654696832321a6e3290d3c49483b9aef",
            "commits": [
                {
                    "sha": "13b25381673c5791764976626a130b090d51bab3",
                    "author": {
                        "email": "dongcan.jiang@gmail.com",
                        "name": "Dongcan Jiang"
                    },
                    "message": "revision: forbid combining --graph and --no-walk\n\nBecause \"--graph\" is about connected history while --no-walk is\nabout discrete points, it does not make sense to allow these two\noptions at the same time. [1]\n\nThis change makes a few calls to \"show --graph\" fail in t4052, but\nasking to show one commit with graph is a nonsensical thing to do.\nThus, tests on \"show --graph\" in t4052 have been removed [2,3].\nSame tests on \"show\" without --graph option have already been tested\nin 4052.\n\n3 testcases have been added to test this patch.\n\n[1]: http://article.gmane.org/gmane.comp.version-control.git/216083\n[2]: http://article.gmane.org/gmane.comp.version-control.git/264950\n[3]: http://article.gmane.org/gmane.comp.version-control.git/265107\n\nHelped-By: Eric Sunshine <sunshine@sunshineco.com>\nHelped-By: René Scharfe <l.s.r@web.de>\nHelped-By: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: Dongcan Jiang <dongcan.jiang@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/13b25381673c5791764976626a130b090d51bab3"
                },
                {
                    "sha": "a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e",
                    "author": {
                        "email": "cxreg@pobox.com",
                        "name": "Dave Olszewski"
                    },
                    "message": "push: allow --follow-tags to be set by config push.followTags\n\nSigned-off-by: Dave Olszewski <cxreg@pobox.com>\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e"
                },
                {
                    "sha": "3ff989e654a7eba78e9cbdf66bd2a49b7272df17",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/push-config' into jch\n\n($gmane/263880, $gmane/263991).\n\n* jk/push-config:\n  push: allow --follow-tags to be set by config push.followTags\n  cmd_push: pass \"flags\" pointer to config callback\n  cmd_push: set \"atomic\" bit directly\n  git_push_config: drop cargo-culted wt_status pointer",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3ff989e654a7eba78e9cbdf66bd2a49b7272df17"
                },
                {
                    "sha": "3ebbd068281d78d5d44680dc942164094443316d",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/slim-index-pack-memory-usage' into jch\n\nMemory usage of \"git index-pack\" has been trimmed by tens of\nper-cent.\n\n* nd/slim-index-pack-memory-usage:\n  index-pack: kill union delta_base to save memory\n  index-pack: reduce object_entry size to save memory",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3ebbd068281d78d5d44680dc942164094443316d"
                },
                {
                    "sha": "cb95118ac227791e31d4fbdaa3e1cab7ac7888b6",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'mh/fdopen-with-retry' into jch\n\nVarious parts of the code where they call fdopen() can fail when\nthey run out of memory; attempt to proceed by retrying the\noperation after freeing some resource.\n\n* mh/fdopen-with-retry:\n  buffer_fdinit(): use fdopen_with_retry()\n  update_info_file(): use fdopen_with_retry()\n  copy_to_log(): use fdopen_with_retry()\n  fdopen_lock_file(): use fdopen_with_retry()\n  SQUASH??? $gmane/264889\n  xfdopen(): if first attempt fails, free memory and try again",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/cb95118ac227791e31d4fbdaa3e1cab7ac7888b6"
                },
                {
                    "sha": "a9c626ebceee561082e20c399099417aaa782cc1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'dj/log-graph-with-no-walk' into jch\n\n\"git log --graph --no-walk A B...\" is a otcnflicting request that\nasks nonsense; no-walk tells us show discrete points in the\nhistory, while graph asks to draw connections between these\ndiscrete points. Forbid the combination.\n\nWill replace with the version that does not special case \"git show\"\nthat implies \"--no-walk\" unless it is given a range.\n\n* dj/log-graph-with-no-walk:\n  revision: forbid combining --graph and --no-walk",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/a9c626ebceee561082e20c399099417aaa782cc1"
                },
                {
                    "sha": "da194209758fc9cc7d29d94ab2d18880c8e18629",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/tag-h-column-is-a-listing-option' into jch\n\n\"git tag -h\" used to show the \"--column\" and \"--sort\" options\nthat are about listing in a wrong section.\n\n* jk/tag-h-column-is-a-listing-option:\n  tag: fix some mis-organized options in \"-h\" listing",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/da194209758fc9cc7d29d94ab2d18880c8e18629"
                },
                {
                    "sha": "fe9b1e2632d90b755903c99a7e24b967953fa2ca",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/untracked-cache' into jch\n\n* nd/untracked-cache: (24 commits)\n  git-status.txt: advertisement for untracked cache\n  untracked cache: guard and disable on system changes\n  mingw32: add uname()\n  t7063: tests for untracked cache\n  update-index: test the system before enabling untracked cache\n  update-index: manually enable or disable untracked cache\n  status: enable untracked cache\n  untracked-cache: temporarily disable with $GIT_DISABLE_UNTRACKED_CACHE\n  untracked cache: mark index dirty if untracked cache is updated\n  untracked cache: print stats with $GIT_TRACE_UNTRACKED_STATS\n  untracked cache: avoid racy timestamps\n  read-cache.c: split racy stat test to a separate function\n  untracked cache: invalidate at index addition or removal\n  untracked cache: load from UNTR index extension\n  untracked cache: save to an index extension\n  ewah: add convenient wrapper ewah_serialize_strbuf()\n  untracked cache: don't open non-existent .gitignore\n  untracked cache: mark what dirs should be recursed/saved\n  untracked cache: record/validate dir mtime and reuse cached output\n  untracked cache: make a wrapper around {open,read,close}dir()\n  ...",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/fe9b1e2632d90b755903c99a7e24b967953fa2ca"
                },
                {
                    "sha": "af4d56d8033c40841386a9b85b2cc334077715c9",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/smart-http-hide-refs' into jch\n\nThe transfer.hiderefs support did not quite work for smart-http\ntransport.\n\n* jk/smart-http-hide-refs:\n  upload-pack: do not check NULL return of lookup_unknown_object\n  upload-pack: fix transfer.hiderefs over smart-http",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/af4d56d8033c40841386a9b85b2cc334077715c9"
                },
                {
                    "sha": "d41d2e3825a6b90776f5a121e34910b441726449",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/test-annoyances' into jch\n\n* jk/test-annoyances:\n  t5551: make EXPENSIVE test cheaper\n  t5541: move run_with_cmdline_limit to test-lib.sh\n  t: pass GIT_TRACE through Apache\n  t: redirect stderr GIT_TRACE to descriptor 4\n  t: translate SIGINT to an exit",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/d41d2e3825a6b90776f5a121e34910b441726449"
                },
                {
                    "sha": "aafde770df7801fa98a5e05c3ce2b75845c960d9",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'as/userdiff-sh' into jch\n\n* as/userdiff-sh:\n  userdiff: funcname and word patterns for sh",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/aafde770df7801fa98a5e05c3ce2b75845c960d9"
                },
                {
                    "sha": "55138e3db56fdef71883310089af0772381ac4f1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'ct/prompt-untracked-fix' into jch\n\nThe prompt script (in contrib/) did not show the untracked sign\nwhen working in a subdirectory without any untracked files.\n\n* ct/prompt-untracked-fix:\n  git prompt: use toplevel to find untracked files",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/55138e3db56fdef71883310089af0772381ac4f1"
                },
                {
                    "sha": "4afe48431312187c30e2095ad06e2e1d60822327",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/config-doc-camelCase' into jch\n\n* nd/config-doc-camelCase:\n  *config.txt: stick to camelCase naming convention",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/4afe48431312187c30e2095ad06e2e1d60822327"
                },
                {
                    "sha": "e674b9b807abf7a3d3925b3c031c53e59e082b66",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'bc/object-id' into jch\n\n* bc/object-id:\n  apply: convert threeway_stage to object_id\n  patch-id: convert to use struct object_id\n  commit: convert parts to struct object_id\n  diff: convert struct combine_diff_path to object_id\n  bulk-checkin.c: convert to use struct object_id\n  zip: use GIT_SHA1_HEXSZ for trailers\n  archive.c: convert to use struct object_id\n  bisect.c: convert leaf functions to use struct object_id\n  define utility functions for object IDs\n  define a structure for object IDs",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/e674b9b807abf7a3d3925b3c031c53e59e082b66"
                },
                {
                    "sha": "db8d750876ce9c43b23ddfdbe618ec5dd12767ee",
                    "author": {
                        "email": "john@szakmeister.net",
                        "name": "John Szakmeister"
                    },
                    "message": "contrib/completion: escape the forward slash in __git_match_ctag\n\nThe current definition results in an incorrect expansion of the term under zsh.\nFor instance \"/^${1////\\\\/}/\" under zsh with the argument \"hi\" results in:\n    /^/\\/h/\\/i/\n\nThis results in an output similar to this when trying to complete `git grep\nchartab` under zsh:\n\n    :: git grep chartabawk: cmd. line:1: /^/\\/c/\\/h/\\/a/\\/r/\\/t/\\/a/\\/b/ { print $1 }\n    awk: cmd. line:1:    ^ backslash not last character on line\n    awk: cmd. line:1: /^/\\/c/\\/h/\\/a/\\/r/\\/t/\\/a/\\/b/ { print $1 }\n    awk: cmd. line:1:    ^ syntax error\n\nLeaving the prompt in a goofy state until the user hits a key.\n\nEscaping the literal / in the parameter expansion (using \"/^${1//\\//\\\\/}/\")\nresults in:\n    /^chartab/\n\nallowing the completion to work correctly.\n\nThis formulation also works under bash.\n\nSigned-off-by: John Szakmeister <john@szakmeister.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/db8d750876ce9c43b23ddfdbe618ec5dd12767ee"
                },
                {
                    "sha": "9d41c8b85d811f4496f77da6a9d2b935d0952f2e",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'js/completion-ctags-pattern-substitution-fix' into jch\n\n* js/completion-ctags-pattern-substitution-fix:\n  contrib/completion: escape the forward slash in __git_match_ctag",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/9d41c8b85d811f4496f77da6a9d2b935d0952f2e"
                },
                {
                    "sha": "d34526e0812b021c9fa4da1059c973ecbeccb8cb",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'je/quiltimport-no-fuzz' into pu\n\n\"quiltimport\" drove \"git apply\" always with -C1 option to reduce\ncontext of the patch in order to give more chance to somewhat stale\npatches to apply.  Add an \"--exact\" option to disable, and also\n\"-C$n\" option to customize this behaviour.  The top patch\noptionally flips the default to \"--exact\".\n\nTired of waiting for an Ack\n\n* je/quiltimport-no-fuzz:\n  git-quiltimport: flip the default not to allow fuzz\n  git-quiltimport.sh: allow declining fuzz with --exact option",
                    "distinct": true,
                    "url": "https://api.github.com/repos/gitster/git/commits/d34526e0812b021c9fa4da1059c973ecbeccb8cb"
                },
                {
                    "sha": "2120d4c1ebdf6429e5b5031940ba8cfc6e573cc7",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'pw/remote-set-url-fetch' into pu\n\n* pw/remote-set-url-fetch:\n  remote: add --fetch and --both options to set-url",
                    "distinct": true,
                    "url": "https://api.github.com/repos/gitster/git/commits/2120d4c1ebdf6429e5b5031940ba8cfc6e573cc7"
                },
                {
                    "sha": "dfed0e0b3b9ccbc70074de1ec3e3b67b1100eb58",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'tr/remerge-diff' into pu\n\n\"log -p\" output learns a new way to let users inspect a merge\ncommit by showing the differences between the automerged result\nwith conflicts the person who recorded the merge would have seen\nand the final conflict resolution that was recorded in the merge.\n\n* tr/remerge-diff:\n  t4213: avoid \"|\" in sed regexp\n  log --remerge-diff: show what the conflict resolution changed\n  name-hash: allow dir hashing even when !ignore_case\n  merge-recursive: allow storing conflict hunks in index\n  merge_diff_mode: fold all merge diff variants into an enum\n  combine-diff: do not pass revs->dense_combined_merges redundantly\n  merge-recursive: -Xindex-only to leave worktree unchanged\n  merge-recursive: internal flag to avoid touching the worktree\n  merge-recursive: remove dead conditional in update_stages()",
                    "distinct": true,
                    "url": "https://api.github.com/repos/gitster/git/commits/dfed0e0b3b9ccbc70074de1ec3e3b67b1100eb58"
                },
                {
                    "sha": "211ab551cdb3ce6df1d47cacb6e6de8503210107",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'bg/rebase-off-of-previous-branch' into pu\n\nTeach \"git rebase -\" to report the concrete name of the branch\n(i.e. the previous one).\n\nBut it stops short and does not do the same for \"git rebase @{-1}\".\n\n* bg/rebase-off-of-previous-branch:\n  git-rebase: print name of rev when using shorthand",
                    "distinct": true,
                    "url": "https://api.github.com/repos/gitster/git/commits/211ab551cdb3ce6df1d47cacb6e6de8503210107"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-15T03:08:36Z"
    },
    {
        "id": "2649612036",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 602242507,
            "size": 16,
            "distinct_size": 0,
            "ref": "refs/heads/jch",
            "head": "9d41c8b85d811f4496f77da6a9d2b935d0952f2e",
            "before": "164507d770759b0333fbf90fed6c7b6db7c5bb0b",
            "commits": [
                {
                    "sha": "13b25381673c5791764976626a130b090d51bab3",
                    "author": {
                        "email": "dongcan.jiang@gmail.com",
                        "name": "Dongcan Jiang"
                    },
                    "message": "revision: forbid combining --graph and --no-walk\n\nBecause \"--graph\" is about connected history while --no-walk is\nabout discrete points, it does not make sense to allow these two\noptions at the same time. [1]\n\nThis change makes a few calls to \"show --graph\" fail in t4052, but\nasking to show one commit with graph is a nonsensical thing to do.\nThus, tests on \"show --graph\" in t4052 have been removed [2,3].\nSame tests on \"show\" without --graph option have already been tested\nin 4052.\n\n3 testcases have been added to test this patch.\n\n[1]: http://article.gmane.org/gmane.comp.version-control.git/216083\n[2]: http://article.gmane.org/gmane.comp.version-control.git/264950\n[3]: http://article.gmane.org/gmane.comp.version-control.git/265107\n\nHelped-By: Eric Sunshine <sunshine@sunshineco.com>\nHelped-By: René Scharfe <l.s.r@web.de>\nHelped-By: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: Dongcan Jiang <dongcan.jiang@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/13b25381673c5791764976626a130b090d51bab3"
                },
                {
                    "sha": "a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e",
                    "author": {
                        "email": "cxreg@pobox.com",
                        "name": "Dave Olszewski"
                    },
                    "message": "push: allow --follow-tags to be set by config push.followTags\n\nSigned-off-by: Dave Olszewski <cxreg@pobox.com>\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e"
                },
                {
                    "sha": "3ff989e654a7eba78e9cbdf66bd2a49b7272df17",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/push-config' into jch\n\n($gmane/263880, $gmane/263991).\n\n* jk/push-config:\n  push: allow --follow-tags to be set by config push.followTags\n  cmd_push: pass \"flags\" pointer to config callback\n  cmd_push: set \"atomic\" bit directly\n  git_push_config: drop cargo-culted wt_status pointer",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3ff989e654a7eba78e9cbdf66bd2a49b7272df17"
                },
                {
                    "sha": "3ebbd068281d78d5d44680dc942164094443316d",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/slim-index-pack-memory-usage' into jch\n\nMemory usage of \"git index-pack\" has been trimmed by tens of\nper-cent.\n\n* nd/slim-index-pack-memory-usage:\n  index-pack: kill union delta_base to save memory\n  index-pack: reduce object_entry size to save memory",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3ebbd068281d78d5d44680dc942164094443316d"
                },
                {
                    "sha": "cb95118ac227791e31d4fbdaa3e1cab7ac7888b6",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'mh/fdopen-with-retry' into jch\n\nVarious parts of the code where they call fdopen() can fail when\nthey run out of memory; attempt to proceed by retrying the\noperation after freeing some resource.\n\n* mh/fdopen-with-retry:\n  buffer_fdinit(): use fdopen_with_retry()\n  update_info_file(): use fdopen_with_retry()\n  copy_to_log(): use fdopen_with_retry()\n  fdopen_lock_file(): use fdopen_with_retry()\n  SQUASH??? $gmane/264889\n  xfdopen(): if first attempt fails, free memory and try again",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/cb95118ac227791e31d4fbdaa3e1cab7ac7888b6"
                },
                {
                    "sha": "a9c626ebceee561082e20c399099417aaa782cc1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'dj/log-graph-with-no-walk' into jch\n\n\"git log --graph --no-walk A B...\" is a otcnflicting request that\nasks nonsense; no-walk tells us show discrete points in the\nhistory, while graph asks to draw connections between these\ndiscrete points. Forbid the combination.\n\nWill replace with the version that does not special case \"git show\"\nthat implies \"--no-walk\" unless it is given a range.\n\n* dj/log-graph-with-no-walk:\n  revision: forbid combining --graph and --no-walk",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/a9c626ebceee561082e20c399099417aaa782cc1"
                },
                {
                    "sha": "da194209758fc9cc7d29d94ab2d18880c8e18629",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/tag-h-column-is-a-listing-option' into jch\n\n\"git tag -h\" used to show the \"--column\" and \"--sort\" options\nthat are about listing in a wrong section.\n\n* jk/tag-h-column-is-a-listing-option:\n  tag: fix some mis-organized options in \"-h\" listing",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/da194209758fc9cc7d29d94ab2d18880c8e18629"
                },
                {
                    "sha": "fe9b1e2632d90b755903c99a7e24b967953fa2ca",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/untracked-cache' into jch\n\n* nd/untracked-cache: (24 commits)\n  git-status.txt: advertisement for untracked cache\n  untracked cache: guard and disable on system changes\n  mingw32: add uname()\n  t7063: tests for untracked cache\n  update-index: test the system before enabling untracked cache\n  update-index: manually enable or disable untracked cache\n  status: enable untracked cache\n  untracked-cache: temporarily disable with $GIT_DISABLE_UNTRACKED_CACHE\n  untracked cache: mark index dirty if untracked cache is updated\n  untracked cache: print stats with $GIT_TRACE_UNTRACKED_STATS\n  untracked cache: avoid racy timestamps\n  read-cache.c: split racy stat test to a separate function\n  untracked cache: invalidate at index addition or removal\n  untracked cache: load from UNTR index extension\n  untracked cache: save to an index extension\n  ewah: add convenient wrapper ewah_serialize_strbuf()\n  untracked cache: don't open non-existent .gitignore\n  untracked cache: mark what dirs should be recursed/saved\n  untracked cache: record/validate dir mtime and reuse cached output\n  untracked cache: make a wrapper around {open,read,close}dir()\n  ...",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/fe9b1e2632d90b755903c99a7e24b967953fa2ca"
                },
                {
                    "sha": "af4d56d8033c40841386a9b85b2cc334077715c9",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/smart-http-hide-refs' into jch\n\nThe transfer.hiderefs support did not quite work for smart-http\ntransport.\n\n* jk/smart-http-hide-refs:\n  upload-pack: do not check NULL return of lookup_unknown_object\n  upload-pack: fix transfer.hiderefs over smart-http",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/af4d56d8033c40841386a9b85b2cc334077715c9"
                },
                {
                    "sha": "d41d2e3825a6b90776f5a121e34910b441726449",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/test-annoyances' into jch\n\n* jk/test-annoyances:\n  t5551: make EXPENSIVE test cheaper\n  t5541: move run_with_cmdline_limit to test-lib.sh\n  t: pass GIT_TRACE through Apache\n  t: redirect stderr GIT_TRACE to descriptor 4\n  t: translate SIGINT to an exit",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/d41d2e3825a6b90776f5a121e34910b441726449"
                },
                {
                    "sha": "aafde770df7801fa98a5e05c3ce2b75845c960d9",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'as/userdiff-sh' into jch\n\n* as/userdiff-sh:\n  userdiff: funcname and word patterns for sh",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/aafde770df7801fa98a5e05c3ce2b75845c960d9"
                },
                {
                    "sha": "55138e3db56fdef71883310089af0772381ac4f1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'ct/prompt-untracked-fix' into jch\n\nThe prompt script (in contrib/) did not show the untracked sign\nwhen working in a subdirectory without any untracked files.\n\n* ct/prompt-untracked-fix:\n  git prompt: use toplevel to find untracked files",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/55138e3db56fdef71883310089af0772381ac4f1"
                },
                {
                    "sha": "4afe48431312187c30e2095ad06e2e1d60822327",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/config-doc-camelCase' into jch\n\n* nd/config-doc-camelCase:\n  *config.txt: stick to camelCase naming convention",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/4afe48431312187c30e2095ad06e2e1d60822327"
                },
                {
                    "sha": "e674b9b807abf7a3d3925b3c031c53e59e082b66",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'bc/object-id' into jch\n\n* bc/object-id:\n  apply: convert threeway_stage to object_id\n  patch-id: convert to use struct object_id\n  commit: convert parts to struct object_id\n  diff: convert struct combine_diff_path to object_id\n  bulk-checkin.c: convert to use struct object_id\n  zip: use GIT_SHA1_HEXSZ for trailers\n  archive.c: convert to use struct object_id\n  bisect.c: convert leaf functions to use struct object_id\n  define utility functions for object IDs\n  define a structure for object IDs",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/e674b9b807abf7a3d3925b3c031c53e59e082b66"
                },
                {
                    "sha": "db8d750876ce9c43b23ddfdbe618ec5dd12767ee",
                    "author": {
                        "email": "john@szakmeister.net",
                        "name": "John Szakmeister"
                    },
                    "message": "contrib/completion: escape the forward slash in __git_match_ctag\n\nThe current definition results in an incorrect expansion of the term under zsh.\nFor instance \"/^${1////\\\\/}/\" under zsh with the argument \"hi\" results in:\n    /^/\\/h/\\/i/\n\nThis results in an output similar to this when trying to complete `git grep\nchartab` under zsh:\n\n    :: git grep chartabawk: cmd. line:1: /^/\\/c/\\/h/\\/a/\\/r/\\/t/\\/a/\\/b/ { print $1 }\n    awk: cmd. line:1:    ^ backslash not last character on line\n    awk: cmd. line:1: /^/\\/c/\\/h/\\/a/\\/r/\\/t/\\/a/\\/b/ { print $1 }\n    awk: cmd. line:1:    ^ syntax error\n\nLeaving the prompt in a goofy state until the user hits a key.\n\nEscaping the literal / in the parameter expansion (using \"/^${1//\\//\\\\/}/\")\nresults in:\n    /^chartab/\n\nallowing the completion to work correctly.\n\nThis formulation also works under bash.\n\nSigned-off-by: John Szakmeister <john@szakmeister.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/db8d750876ce9c43b23ddfdbe618ec5dd12767ee"
                },
                {
                    "sha": "9d41c8b85d811f4496f77da6a9d2b935d0952f2e",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'js/completion-ctags-pattern-substitution-fix' into jch\n\n* js/completion-ctags-pattern-substitution-fix:\n  contrib/completion: escape the forward slash in __git_match_ctag",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/9d41c8b85d811f4496f77da6a9d2b935d0952f2e"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-15T03:08:33Z"
    },
    {
        "id": "2649612009",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 602242492,
            "size": 1,
            "distinct_size": 0,
            "ref": "refs/heads/jk/push-config",
            "head": "a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e",
            "before": "973995b6953945068d52956333a697cb0f46a46a",
            "commits": [
                {
                    "sha": "a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e",
                    "author": {
                        "email": "cxreg@pobox.com",
                        "name": "Dave Olszewski"
                    },
                    "message": "push: allow --follow-tags to be set by config push.followTags\n\nSigned-off-by: Dave Olszewski <cxreg@pobox.com>\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-15T03:08:30Z"
    },
    {
        "id": "2649611968",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "ref": "js/completion-ctags-pattern-substitution-fix",
            "ref_type": "branch",
            "master_branch": "master",
            "description": "Git - the stupid content tracker - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-15T03:08:26Z"
    },
    {
        "id": "2649611401",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 36502,
            "name": "git/git",
            "url": "https://api.github.com/repos/git/git"
        },
        "payload": {
            "push_id": 602242188,
            "size": 33,
            "distinct_size": 33,
            "ref": "refs/heads/pu",
            "head": "1d9a75997446e07ead2ea7feb93932bdd196ddeb",
            "before": "69a3822a654696832321a6e3290d3c49483b9aef",
            "commits": [
                {
                    "sha": "13b25381673c5791764976626a130b090d51bab3",
                    "author": {
                        "email": "dongcan.jiang@gmail.com",
                        "name": "Dongcan Jiang"
                    },
                    "message": "revision: forbid combining --graph and --no-walk\n\nBecause \"--graph\" is about connected history while --no-walk is\nabout discrete points, it does not make sense to allow these two\noptions at the same time. [1]\n\nThis change makes a few calls to \"show --graph\" fail in t4052, but\nasking to show one commit with graph is a nonsensical thing to do.\nThus, tests on \"show --graph\" in t4052 have been removed [2,3].\nSame tests on \"show\" without --graph option have already been tested\nin 4052.\n\n3 testcases have been added to test this patch.\n\n[1]: http://article.gmane.org/gmane.comp.version-control.git/216083\n[2]: http://article.gmane.org/gmane.comp.version-control.git/264950\n[3]: http://article.gmane.org/gmane.comp.version-control.git/265107\n\nHelped-By: Eric Sunshine <sunshine@sunshineco.com>\nHelped-By: René Scharfe <l.s.r@web.de>\nHelped-By: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: Dongcan Jiang <dongcan.jiang@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/13b25381673c5791764976626a130b090d51bab3"
                },
                {
                    "sha": "a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e",
                    "author": {
                        "email": "cxreg@pobox.com",
                        "name": "Dave Olszewski"
                    },
                    "message": "push: allow --follow-tags to be set by config push.followTags\n\nSigned-off-by: Dave Olszewski <cxreg@pobox.com>\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/a8bc269f11b34e60f5fdbd8e831a654dd6b6b67e"
                },
                {
                    "sha": "3ff989e654a7eba78e9cbdf66bd2a49b7272df17",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/push-config' into jch\n\n($gmane/263880, $gmane/263991).\n\n* jk/push-config:\n  push: allow --follow-tags to be set by config push.followTags\n  cmd_push: pass \"flags\" pointer to config callback\n  cmd_push: set \"atomic\" bit directly\n  git_push_config: drop cargo-culted wt_status pointer",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/3ff989e654a7eba78e9cbdf66bd2a49b7272df17"
                },
                {
                    "sha": "3ebbd068281d78d5d44680dc942164094443316d",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/slim-index-pack-memory-usage' into jch\n\nMemory usage of \"git index-pack\" has been trimmed by tens of\nper-cent.\n\n* nd/slim-index-pack-memory-usage:\n  index-pack: kill union delta_base to save memory\n  index-pack: reduce object_entry size to save memory",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/3ebbd068281d78d5d44680dc942164094443316d"
                },
                {
                    "sha": "cb95118ac227791e31d4fbdaa3e1cab7ac7888b6",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'mh/fdopen-with-retry' into jch\n\nVarious parts of the code where they call fdopen() can fail when\nthey run out of memory; attempt to proceed by retrying the\noperation after freeing some resource.\n\n* mh/fdopen-with-retry:\n  buffer_fdinit(): use fdopen_with_retry()\n  update_info_file(): use fdopen_with_retry()\n  copy_to_log(): use fdopen_with_retry()\n  fdopen_lock_file(): use fdopen_with_retry()\n  SQUASH??? $gmane/264889\n  xfdopen(): if first attempt fails, free memory and try again",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/cb95118ac227791e31d4fbdaa3e1cab7ac7888b6"
                },
                {
                    "sha": "a9c626ebceee561082e20c399099417aaa782cc1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'dj/log-graph-with-no-walk' into jch\n\n\"git log --graph --no-walk A B...\" is a otcnflicting request that\nasks nonsense; no-walk tells us show discrete points in the\nhistory, while graph asks to draw connections between these\ndiscrete points. Forbid the combination.\n\nWill replace with the version that does not special case \"git show\"\nthat implies \"--no-walk\" unless it is given a range.\n\n* dj/log-graph-with-no-walk:\n  revision: forbid combining --graph and --no-walk",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/a9c626ebceee561082e20c399099417aaa782cc1"
                },
                {
                    "sha": "da194209758fc9cc7d29d94ab2d18880c8e18629",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/tag-h-column-is-a-listing-option' into jch\n\n\"git tag -h\" used to show the \"--column\" and \"--sort\" options\nthat are about listing in a wrong section.\n\n* jk/tag-h-column-is-a-listing-option:\n  tag: fix some mis-organized options in \"-h\" listing",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/da194209758fc9cc7d29d94ab2d18880c8e18629"
                },
                {
                    "sha": "fe9b1e2632d90b755903c99a7e24b967953fa2ca",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/untracked-cache' into jch\n\n* nd/untracked-cache: (24 commits)\n  git-status.txt: advertisement for untracked cache\n  untracked cache: guard and disable on system changes\n  mingw32: add uname()\n  t7063: tests for untracked cache\n  update-index: test the system before enabling untracked cache\n  update-index: manually enable or disable untracked cache\n  status: enable untracked cache\n  untracked-cache: temporarily disable with $GIT_DISABLE_UNTRACKED_CACHE\n  untracked cache: mark index dirty if untracked cache is updated\n  untracked cache: print stats with $GIT_TRACE_UNTRACKED_STATS\n  untracked cache: avoid racy timestamps\n  read-cache.c: split racy stat test to a separate function\n  untracked cache: invalidate at index addition or removal\n  untracked cache: load from UNTR index extension\n  untracked cache: save to an index extension\n  ewah: add convenient wrapper ewah_serialize_strbuf()\n  untracked cache: don't open non-existent .gitignore\n  untracked cache: mark what dirs should be recursed/saved\n  untracked cache: record/validate dir mtime and reuse cached output\n  untracked cache: make a wrapper around {open,read,close}dir()\n  ...",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/fe9b1e2632d90b755903c99a7e24b967953fa2ca"
                },
                {
                    "sha": "af4d56d8033c40841386a9b85b2cc334077715c9",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/smart-http-hide-refs' into jch\n\nThe transfer.hiderefs support did not quite work for smart-http\ntransport.\n\n* jk/smart-http-hide-refs:\n  upload-pack: do not check NULL return of lookup_unknown_object\n  upload-pack: fix transfer.hiderefs over smart-http",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/af4d56d8033c40841386a9b85b2cc334077715c9"
                },
                {
                    "sha": "d41d2e3825a6b90776f5a121e34910b441726449",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/test-annoyances' into jch\n\n* jk/test-annoyances:\n  t5551: make EXPENSIVE test cheaper\n  t5541: move run_with_cmdline_limit to test-lib.sh\n  t: pass GIT_TRACE through Apache\n  t: redirect stderr GIT_TRACE to descriptor 4\n  t: translate SIGINT to an exit",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/d41d2e3825a6b90776f5a121e34910b441726449"
                },
                {
                    "sha": "aafde770df7801fa98a5e05c3ce2b75845c960d9",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'as/userdiff-sh' into jch\n\n* as/userdiff-sh:\n  userdiff: funcname and word patterns for sh",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/aafde770df7801fa98a5e05c3ce2b75845c960d9"
                },
                {
                    "sha": "55138e3db56fdef71883310089af0772381ac4f1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'ct/prompt-untracked-fix' into jch\n\nThe prompt script (in contrib/) did not show the untracked sign\nwhen working in a subdirectory without any untracked files.\n\n* ct/prompt-untracked-fix:\n  git prompt: use toplevel to find untracked files",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/55138e3db56fdef71883310089af0772381ac4f1"
                },
                {
                    "sha": "4afe48431312187c30e2095ad06e2e1d60822327",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/config-doc-camelCase' into jch\n\n* nd/config-doc-camelCase:\n  *config.txt: stick to camelCase naming convention",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/4afe48431312187c30e2095ad06e2e1d60822327"
                },
                {
                    "sha": "e674b9b807abf7a3d3925b3c031c53e59e082b66",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'bc/object-id' into jch\n\n* bc/object-id:\n  apply: convert threeway_stage to object_id\n  patch-id: convert to use struct object_id\n  commit: convert parts to struct object_id\n  diff: convert struct combine_diff_path to object_id\n  bulk-checkin.c: convert to use struct object_id\n  zip: use GIT_SHA1_HEXSZ for trailers\n  archive.c: convert to use struct object_id\n  bisect.c: convert leaf functions to use struct object_id\n  define utility functions for object IDs\n  define a structure for object IDs",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/e674b9b807abf7a3d3925b3c031c53e59e082b66"
                },
                {
                    "sha": "db8d750876ce9c43b23ddfdbe618ec5dd12767ee",
                    "author": {
                        "email": "john@szakmeister.net",
                        "name": "John Szakmeister"
                    },
                    "message": "contrib/completion: escape the forward slash in __git_match_ctag\n\nThe current definition results in an incorrect expansion of the term under zsh.\nFor instance \"/^${1////\\\\/}/\" under zsh with the argument \"hi\" results in:\n    /^/\\/h/\\/i/\n\nThis results in an output similar to this when trying to complete `git grep\nchartab` under zsh:\n\n    :: git grep chartabawk: cmd. line:1: /^/\\/c/\\/h/\\/a/\\/r/\\/t/\\/a/\\/b/ { print $1 }\n    awk: cmd. line:1:    ^ backslash not last character on line\n    awk: cmd. line:1: /^/\\/c/\\/h/\\/a/\\/r/\\/t/\\/a/\\/b/ { print $1 }\n    awk: cmd. line:1:    ^ syntax error\n\nLeaving the prompt in a goofy state until the user hits a key.\n\nEscaping the literal / in the parameter expansion (using \"/^${1//\\//\\\\/}/\")\nresults in:\n    /^chartab/\n\nallowing the completion to work correctly.\n\nThis formulation also works under bash.\n\nSigned-off-by: John Szakmeister <john@szakmeister.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/db8d750876ce9c43b23ddfdbe618ec5dd12767ee"
                },
                {
                    "sha": "9d41c8b85d811f4496f77da6a9d2b935d0952f2e",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'js/completion-ctags-pattern-substitution-fix' into jch\n\n* js/completion-ctags-pattern-substitution-fix:\n  contrib/completion: escape the forward slash in __git_match_ctag",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/9d41c8b85d811f4496f77da6a9d2b935d0952f2e"
                },
                {
                    "sha": "d34526e0812b021c9fa4da1059c973ecbeccb8cb",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'je/quiltimport-no-fuzz' into pu\n\n\"quiltimport\" drove \"git apply\" always with -C1 option to reduce\ncontext of the patch in order to give more chance to somewhat stale\npatches to apply.  Add an \"--exact\" option to disable, and also\n\"-C$n\" option to customize this behaviour.  The top patch\noptionally flips the default to \"--exact\".\n\nTired of waiting for an Ack\n\n* je/quiltimport-no-fuzz:\n  git-quiltimport: flip the default not to allow fuzz\n  git-quiltimport.sh: allow declining fuzz with --exact option",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/d34526e0812b021c9fa4da1059c973ecbeccb8cb"
                },
                {
                    "sha": "2120d4c1ebdf6429e5b5031940ba8cfc6e573cc7",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'pw/remote-set-url-fetch' into pu\n\n* pw/remote-set-url-fetch:\n  remote: add --fetch and --both options to set-url",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/2120d4c1ebdf6429e5b5031940ba8cfc6e573cc7"
                },
                {
                    "sha": "dfed0e0b3b9ccbc70074de1ec3e3b67b1100eb58",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'tr/remerge-diff' into pu\n\n\"log -p\" output learns a new way to let users inspect a merge\ncommit by showing the differences between the automerged result\nwith conflicts the person who recorded the merge would have seen\nand the final conflict resolution that was recorded in the merge.\n\n* tr/remerge-diff:\n  t4213: avoid \"|\" in sed regexp\n  log --remerge-diff: show what the conflict resolution changed\n  name-hash: allow dir hashing even when !ignore_case\n  merge-recursive: allow storing conflict hunks in index\n  merge_diff_mode: fold all merge diff variants into an enum\n  combine-diff: do not pass revs->dense_combined_merges redundantly\n  merge-recursive: -Xindex-only to leave worktree unchanged\n  merge-recursive: internal flag to avoid touching the worktree\n  merge-recursive: remove dead conditional in update_stages()",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/dfed0e0b3b9ccbc70074de1ec3e3b67b1100eb58"
                },
                {
                    "sha": "211ab551cdb3ce6df1d47cacb6e6de8503210107",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'bg/rebase-off-of-previous-branch' into pu\n\nTeach \"git rebase -\" to report the concrete name of the branch\n(i.e. the previous one).\n\nBut it stops short and does not do the same for \"git rebase @{-1}\".\n\n* bg/rebase-off-of-previous-branch:\n  git-rebase: print name of rev when using shorthand",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/211ab551cdb3ce6df1d47cacb6e6de8503210107"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-15T03:07:19Z",
        "org": {
            "id": 18133,
            "login": "git",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/git",
            "avatar_url": "https://avatars.githubusercontent.com/u/18133?"
        }
    },
    {
        "id": "2648761924",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 2535566,
            "name": "gitster/git-manpages",
            "url": "https://api.github.com/repos/gitster/git-manpages"
        },
        "payload": {
            "push_id": 601859712,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/master",
            "head": "e0967a91f719b4904b89bb2102e3f7e91e6f1441",
            "before": "0b1b0f73d3addd27f6f1a56887513e4ccea3fbcb",
            "commits": [
                {
                    "sha": "e0967a91f719b4904b89bb2102e3f7e91e6f1441",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Autogenerated manpages for v2.3.3-199-g52cae",
                    "distinct": true,
                    "url": "https://api.github.com/repos/gitster/git-manpages/commits/e0967a91f719b4904b89bb2102e3f7e91e6f1441"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:09:36Z"
    },
    {
        "id": "2648761887",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 601859698,
            "size": 68,
            "distinct_size": 0,
            "ref": "refs/heads/jch",
            "head": "164507d770759b0333fbf90fed6c7b6db7c5bb0b",
            "before": "de9340dbbd41cd9690283c5c677c01535b3d75d5",
            "commits": [
                {
                    "sha": "e172755b1eeb061c8fafb5ae8e4e9e72f68a0cdd",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "upload-pack: fix transfer.hiderefs over smart-http\n\nWhen upload-pack advertises the refs (either for a normal,\nnon-stateless request, or for the initial contact in a\nstateless one), we call for_each_ref with the send_ref\nfunction as its callback. send_ref, in turn, calls\nmark_our_ref, which checks whether the ref is hidden, and\nsets OUR_REF or HIDDEN_REF on the object as appropriate.  If\nit is hidden, mark_our_ref also returns \"1\" to signal\nsend_ref that the ref should not be advertised.\n\nIf we are not advertising refs, (i.e., the follow-up\ninvocation by an http client to send its \"want\" lines), we\nuse mark_our_ref directly as a callback to for_each_ref. Its\nmarking does the right thing, but when it then returns \"1\"\nto for_each_ref, the latter interprets this as an error and\nstops iterating. As a result, we skip marking all of the\nrefs that come lexicographically after it. Any \"want\" lines\nfrom the client asking for those objects will fail, as they\nwere not properly marked with OUR_REF.\n\nTo solve this, we introduce a wrapper callback around\nmark_our_ref which always returns 0 (even if the ref is\nhidden, we want to keep iterating). We also tweak the\nsignature of mark_our_ref to exclude unnecessary parameters\nthat were present only to conform to the callback interface.\nThis should make it less likely for somebody to accidentally\nuse it as a callback in the future.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/e172755b1eeb061c8fafb5ae8e4e9e72f68a0cdd"
                },
                {
                    "sha": "8ddf3ca74f40bebd79cedba5ba82ca9f2eb33860",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "upload-pack: do not check NULL return of lookup_unknown_object\n\nWe check whether the return value of lookup_unknown_object\nis NULL, but some code paths dereference it before our\ncheck. This turns out not to be capable of causing a\nsegfault, though. The lookup_unknown_object function will\nnever return NULL, since the whole point is to allocate an\nobject struct if it does not find an existing one. So the\ncode here is not wrong, it is just confusing. Let's just\ndrop the NULL check.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/8ddf3ca74f40bebd79cedba5ba82ca9f2eb33860"
                },
                {
                    "sha": "da706545f7a1fa97cd8d9cf40659ab2a167be7c0",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t: translate SIGINT to an exit\n\nRight now if a test script receives SIGINT (e.g., because a\ntest was hanging and the user hit ^C), the shell exits\nimmediately. This can be annoying if the test script did any\nglobal setup, like starting apache or git-daemon, as it will\nnot have an opportunity to clean up after itself. A\nsubsequent run of the test won't be able to start its own\ndaemon, and will either fail or skip the tests.\n\nInstead, let's trap SIGINT to make sure we do a clean\nshutdown, and just chain it to a normal exit (which will\ntrigger any cleanup).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/da706545f7a1fa97cd8d9cf40659ab2a167be7c0"
                },
                {
                    "sha": "025232e8aa4b56d450079528fcfbff53da3e7fa4",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t: redirect stderr GIT_TRACE to descriptor 4\n\nIf you run a test script like:\n\n  GIT_TRACE=1 ./t0061-run-command.sh\n\nyou may get test failures, because some tests capture and\ncheck the stderr output from git commands (and with\nGIT_TRACE set to 1, the trace output will be included\nthere).\n\nWhen we see GIT_TRACE set like this, we print a warning to\nthe user. However, we can do even better than that by just\npointing it to descriptor 4, which all tests leave connected\nto the test script's stderr. That's likely what the user\nintended (and any scripts that do want to see GIT_TRACE\noutput will set GIT_TRACE themselves).\n\nNot only does this avoid false negatives in the tests, but\nit means the user will actually see trace output for git\ncalls that redirect their stderr (whereas before, it was\nsometimes confusingly buried in a file).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/025232e8aa4b56d450079528fcfbff53da3e7fa4"
                },
                {
                    "sha": "89c57ab3f0168b192d5ccc159972fdb26e0ba80b",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t: pass GIT_TRACE through Apache\n\nApache removes GIT_TRACE from the environment before running\ngit-http-backend. This can make it hard to debug the server\nside of an http session. Let's let it through.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/89c57ab3f0168b192d5ccc159972fdb26e0ba80b"
                },
                {
                    "sha": "9a308de37c485068d6470d4c51e231a36e651e98",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t5541: move run_with_cmdline_limit to test-lib.sh\n\nWe use this to test http pushing with a restricted\ncommandline. Other scripts (like t5551, which does http\nfetching) will want to use it, too.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/9a308de37c485068d6470d4c51e231a36e651e98"
                },
                {
                    "sha": "376e4b39d4453ce50cbacc9c46a3bbdaad2134b2",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t5551: make EXPENSIVE test cheaper\n\nWe create 50,000 tags to check that we don't overflow the\ncommand-line of fetch-pack. But by using run_with_cmdline_limit,\nwe can get the same effect with a much smaller number of\ntags. This makes the test fast enough that we can drop the\nEXPENSIVE prereq, which means people will actually run it.\n\nIt was not documented to do so, but this test was also the\nonly test of a clone-over-http that requires multiple POSTs\nduring the conversation. We can continue to test that by\ndropping http.postbuffer to its minimum size, and checking\nthat we get two POSTs.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/376e4b39d4453ce50cbacc9c46a3bbdaad2134b2"
                },
                {
                    "sha": "f7711b353572616e7d2fdff7a3cc5f757d314eb8",
                    "author": {
                        "email": "adrien+dev@schischi.me",
                        "name": "Adrien Schildknecht"
                    },
                    "message": "userdiff: funcname and word patterns for sh\n\nAdd regexp based on the \"Shell Command Language\" specifications.\nBecause of the lax syntax of sh, some corner cases may not be\nhandled properly.\n\nSigned-off-by: Adrien Schildknecht <adrien+dev@schischi.me>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/f7711b353572616e7d2fdff7a3cc5f757d314eb8"
                },
                {
                    "sha": "da0005b8853137c91e44867d899910d5c7eb4425",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "*config.txt: stick to camelCase naming convention\n\nThis should improve readability. Compare \"thislongname\" and\n\"thisLongName\". The following keys are left in unchanged. We can\ndecide what to do with them later.\n\n - am.keepcr\n - core.autocrlf .safecrlf .trustctime\n - diff.dirstat .noprefix\n - gitcvs.usecrlfattr\n - gui.blamehistoryctx .trustmtime\n - pull.twohead\n - receive.autogc\n - sendemail.signedoffbycc .smtpsslcertpath .suppresscc\n\nHelped-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/da0005b8853137c91e44867d899910d5c7eb4425"
                },
                {
                    "sha": "34aedc3baa8fa214b64ce04227ff8e0c4ddf0c78",
                    "author": {
                        "email": "codemister99@yahoo.com",
                        "name": "Cody A Taylor"
                    },
                    "message": "git prompt: use toplevel to find untracked files\n\nThe __git_ps1() prompt function would not show an untracked\nstate when the current working directory was not a parent of\nthe untracked file.\n\nSigned-off-by: Cody A Taylor <codemister99@yahoo.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/34aedc3baa8fa214b64ce04227ff8e0c4ddf0c78"
                },
                {
                    "sha": "5f7817c85d4b5f65626c8f49249a6c91292b8513",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "define a structure for object IDs\n\nMany places throughout the code use \"unsigned char [20]\" to store object IDs\n(SHA-1 values).  This leads to lots of hardcoded numbers throughout the\ncodebase.  It also leads to confusion about the purposes of a buffer.\n\nIntroduce a structure for object IDs.  This allows us to obtain the benefits\nof compile-time checking for misuse.  The structure is expected to remain\nthe same size and have the same alignment requirements on all known\nplatforms, compared to the array of unsigned char, although this is not\nrequired for correctness.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5f7817c85d4b5f65626c8f49249a6c91292b8513"
                },
                {
                    "sha": "aa1c6fdf478c023180e5ca5f1658b00a72592dc6",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "define utility functions for object IDs\n\nThere are several utility functions (hashcmp and friends) that are used\nfor comparing object IDs (SHA-1 values).  Using these functions, which\ntake pointers to unsigned char, with struct object_id requires tiresome\naccess to the sha1 member, which bloats code and violates the desired\nencapsulation.  Provide wrappers around these functions for struct\nobject_id for neater, more maintainable code.  Use the new constants to\navoid the hard-coded 20s and 40s throughout the original functions.\n\nThese functions simply call the underlying pointer-to-unsigned-char\nversions to ensure that any performance improvements will be passed\nthrough to the new functions.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/aa1c6fdf478c023180e5ca5f1658b00a72592dc6"
                },
                {
                    "sha": "3c5ff9956c017e1737fdc350dbec160277be4fc1",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "bisect.c: convert leaf functions to use struct object_id\n\nConvert some constants to GIT_SHA1_HEXSZ.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3c5ff9956c017e1737fdc350dbec160277be4fc1"
                },
                {
                    "sha": "13609673c4410df754197ec4ae9b57f15bc803d4",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "archive.c: convert to use struct object_id\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/13609673c4410df754197ec4ae9b57f15bc803d4"
                },
                {
                    "sha": "aeecdcd4c1c1a380e45aecadd8042a6a90ee3a20",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "zip: use GIT_SHA1_HEXSZ for trailers\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/aeecdcd4c1c1a380e45aecadd8042a6a90ee3a20"
                },
                {
                    "sha": "fa33c3aae238c683b2b15989b9d7f88df19fa93d",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "bulk-checkin.c: convert to use struct object_id\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/fa33c3aae238c683b2b15989b9d7f88df19fa93d"
                },
                {
                    "sha": "1ff57c13c54bc9d548178e012f77717f87f2655d",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "diff: convert struct combine_diff_path to object_id\n\nAlso, convert a constant to GIT_SHA1_HEXSZ.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/1ff57c13c54bc9d548178e012f77717f87f2655d"
                },
                {
                    "sha": "7683e2e6e301835236539a33b2fba936dd1a0a2b",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "commit: convert parts to struct object_id\n\nConvert struct commit_graft and necessary local parts of commit.c.\nAlso, convert several constants based on the hex length of an SHA-1 to\nuse GIT_SHA1_HEXSZ, and move several magic constants into variables for\nreadability.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/7683e2e6e301835236539a33b2fba936dd1a0a2b"
                },
                {
                    "sha": "1a876a69af6552d16827ecc1931c42e2287a83a0",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "patch-id: convert to use struct object_id\n\nConvert some magic numbers to the new GIT_SHA1 constants.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/1a876a69af6552d16827ecc1931c42e2287a83a0"
                },
                {
                    "sha": "d07d4ab401173a10173f2747cf5e0f074b6d2b39",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "apply: convert threeway_stage to object_id\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/d07d4ab401173a10173f2747cf5e0f074b6d2b39"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:09:31Z"
    },
    {
        "id": "2648761878",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "ref": "v2.3.3",
            "ref_type": "tag",
            "master_branch": "master",
            "description": "Git - the stupid content tracker - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-14T07:09:31Z"
    },
    {
        "id": "2648761875",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "ref": "ct/prompt-untracked-fix",
            "ref_type": "branch",
            "master_branch": "master",
            "description": "Git - the stupid content tracker - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-14T07:09:31Z"
    },
    {
        "id": "2648761872",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "ref": "jk/test-annoyances",
            "ref_type": "branch",
            "master_branch": "master",
            "description": "Git - the stupid content tracker - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-14T07:09:31Z"
    },
    {
        "id": "2648761870",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 601859689,
            "size": 14,
            "distinct_size": 0,
            "ref": "refs/heads/master",
            "head": "52cae643c5d49b7fa18a7a4c60c284f9ae2e2c71",
            "before": "7a9409cb0104466eba32162f5bc4e5ab46130f02",
            "commits": [
                {
                    "sha": "c722ba4814f34d02faed305e4cc6498c783543a9",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/daemon-interpolate' into maint\n\nThe \"interpolated-path\" option of \"git daemon\" inserted any string\nclient declared on the \"host=\" capability request without checking.\nSanitize and limit %H and %CH to a saner and a valid DNS name.\n\n* jk/daemon-interpolate:\n  daemon: sanitize incoming virtual hostname\n  t5570: test git-daemon's --interpolated-path option\n  git_connect: let user override virtual-host we send to daemon",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/c722ba4814f34d02faed305e4cc6498c783543a9"
                },
                {
                    "sha": "1469d9906833a8bd7d07a70ba8250c823716f20a",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'rs/daemon-interpolate' into maint\n\n\"git daemon\" looked up the hostname even when \"%CH\" and \"%IP\"\ninterpolations are not requested, which was unnecessary.\n\n* rs/daemon-interpolate:\n  daemon: use callback to build interpolated path\n  daemon: look up client-supplied hostname lazily",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/1469d9906833a8bd7d07a70ba8250c823716f20a"
                },
                {
                    "sha": "5244a31039dbb3fe0d544fc56100d0ccbc653131",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jc/apply-beyond-symlink' into maint\n\n\"git apply\" was not very careful about reading from, removing,\nupdating and creating paths outside the working tree (under\n--index/--cached) or the current directory (when used as a\nreplacement for GNU patch).\n\n* jc/apply-beyond-symlink:\n  apply: do not touch a file beyond a symbolic link\n  apply: do not read from beyond a symbolic link\n  apply: do not read from the filesystem under --index\n  apply: reject input that touches outside the working area",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5244a31039dbb3fe0d544fc56100d0ccbc653131"
                },
                {
                    "sha": "30a52c1dcbb286214a0d59fb4b3df1d13d9d060d",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'ms/submodule-update-config-doc' into maint\n\nThe interaction between \"git submodule update\" and the\nsubmodule.*.update configuration was not clearly documented.\n\n* ms/submodule-update-config-doc:\n  submodule: improve documentation of update subcommand",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/30a52c1dcbb286214a0d59fb4b3df1d13d9d060d"
                },
                {
                    "sha": "a4b4f9b8e317844ef64ec073241d38c9a656b2c8",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'mk/diff-shortstat-dirstat-fix' into maint\n\n\"git diff --shortstat --dirstat=changes\" showed a dirstat based on\nlines that was never asked by the end user in addition to the\ndirstat that the user asked for.\n\n* mk/diff-shortstat-dirstat-fix:\n  diff --shortstat --dirstat: remove duplicate output",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/a4b4f9b8e317844ef64ec073241d38c9a656b2c8"
                },
                {
                    "sha": "3af1bcafffb0d462abf6208574059f72ce4d5b48",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'mg/doc-remote-tags-or-not' into maint\n\n\"git remote add\" mentioned \"--tags\" and \"--no-tags\" and was not\nclear that fetch from the remote in the future will use the default\nbehaviour when neither is given to override it.\n\n* mg/doc-remote-tags-or-not:\n  git-remote.txt: describe behavior without --tags and --no-tags",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3af1bcafffb0d462abf6208574059f72ce4d5b48"
                },
                {
                    "sha": "2408f3b74b26580b9f197e4edd96e73b0fba41c5",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/grep-exclude-standard-help-fix' into maint\n\nDescription given by \"grep -h\" for its --exclude-standard option\nwas phrased poorly.\n\n* nd/grep-exclude-standard-help-fix:\n  grep: correct help string for --exclude-standard",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/2408f3b74b26580b9f197e4edd96e73b0fba41c5"
                },
                {
                    "sha": "ae8ada450a9103d2fe94ac9baf072fd31de08c30",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'bw/kwset-use-unsigned' into maint\n\nThe borrowed code in kwset API did not follow our usual convention\nto use \"unsigned char\" to store values that range from 0-255.\n\n* bw/kwset-use-unsigned:\n  kwset: use unsigned char to store values with high-bit set",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/ae8ada450a9103d2fe94ac9baf072fd31de08c30"
                },
                {
                    "sha": "3aab60b3baefd79d113fdc83685ba38c71986538",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/diffcore-rename-duplicate' into maint\n\nA corrupt input to \"git diff -M\" can cause us to segfault.\n\n* jk/diffcore-rename-duplicate:\n  diffcore-rename: avoid processing duplicate destinations\n  diffcore-rename: split locate_rename_dst into two functions",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3aab60b3baefd79d113fdc83685ba38c71986538"
                },
                {
                    "sha": "bb8f6de064a2b92febe06c5cbfcf98c686dce8a4",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jc/diff-test-updates' into maint\n\nTest clean-up.\n\n* jc/diff-test-updates:\n  test_ln_s_add: refresh stat info of fake symbolic links\n  t4008: modernise style\n  t/diff-lib: check exact object names in compare_diff_raw\n  tests: do not borrow from COPYING and README from the real source\n  t4010: correct expected object names\n  t9300: correct expected object names\n  t4008: correct stale comments",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/bb8f6de064a2b92febe06c5cbfcf98c686dce8a4"
                },
                {
                    "sha": "113bc160941c4bcc9211d32f17098ab5a2428fa4",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'ak/t5516-typofix' into maint\n\n* ak/t5516-typofix:\n  t5516: correct misspelled pushInsteadOf",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/113bc160941c4bcc9211d32f17098ab5a2428fa4"
                },
                {
                    "sha": "4b23b5d1afbc7fcd8bc744523f4c3ff06dbe25d1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'mr/doc-clean-f-f' into maint\n\nDocumentation update.\n\n* mr/doc-clean-f-f:\n  Documentation/git-clean.txt: document that -f may need to be given twice",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/4b23b5d1afbc7fcd8bc744523f4c3ff06dbe25d1"
                },
                {
                    "sha": "bb8577532add843833ebf8b5324f94f84cb71ca0",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Git 2.3.3\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/bb8577532add843833ebf8b5324f94f84cb71ca0"
                },
                {
                    "sha": "52cae643c5d49b7fa18a7a4c60c284f9ae2e2c71",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Sync with 2.3.3",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/52cae643c5d49b7fa18a7a4c60c284f9ae2e2c71"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:09:31Z"
    },
    {
        "id": "2648761868",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 601859688,
            "size": 85,
            "distinct_size": 17,
            "ref": "refs/heads/pu",
            "head": "69a3822a654696832321a6e3290d3c49483b9aef",
            "before": "474f2d10de3111cb8b25f05c37c7f0518b70a818",
            "commits": [
                {
                    "sha": "e172755b1eeb061c8fafb5ae8e4e9e72f68a0cdd",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "upload-pack: fix transfer.hiderefs over smart-http\n\nWhen upload-pack advertises the refs (either for a normal,\nnon-stateless request, or for the initial contact in a\nstateless one), we call for_each_ref with the send_ref\nfunction as its callback. send_ref, in turn, calls\nmark_our_ref, which checks whether the ref is hidden, and\nsets OUR_REF or HIDDEN_REF on the object as appropriate.  If\nit is hidden, mark_our_ref also returns \"1\" to signal\nsend_ref that the ref should not be advertised.\n\nIf we are not advertising refs, (i.e., the follow-up\ninvocation by an http client to send its \"want\" lines), we\nuse mark_our_ref directly as a callback to for_each_ref. Its\nmarking does the right thing, but when it then returns \"1\"\nto for_each_ref, the latter interprets this as an error and\nstops iterating. As a result, we skip marking all of the\nrefs that come lexicographically after it. Any \"want\" lines\nfrom the client asking for those objects will fail, as they\nwere not properly marked with OUR_REF.\n\nTo solve this, we introduce a wrapper callback around\nmark_our_ref which always returns 0 (even if the ref is\nhidden, we want to keep iterating). We also tweak the\nsignature of mark_our_ref to exclude unnecessary parameters\nthat were present only to conform to the callback interface.\nThis should make it less likely for somebody to accidentally\nuse it as a callback in the future.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/e172755b1eeb061c8fafb5ae8e4e9e72f68a0cdd"
                },
                {
                    "sha": "8ddf3ca74f40bebd79cedba5ba82ca9f2eb33860",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "upload-pack: do not check NULL return of lookup_unknown_object\n\nWe check whether the return value of lookup_unknown_object\nis NULL, but some code paths dereference it before our\ncheck. This turns out not to be capable of causing a\nsegfault, though. The lookup_unknown_object function will\nnever return NULL, since the whole point is to allocate an\nobject struct if it does not find an existing one. So the\ncode here is not wrong, it is just confusing. Let's just\ndrop the NULL check.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/8ddf3ca74f40bebd79cedba5ba82ca9f2eb33860"
                },
                {
                    "sha": "da706545f7a1fa97cd8d9cf40659ab2a167be7c0",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t: translate SIGINT to an exit\n\nRight now if a test script receives SIGINT (e.g., because a\ntest was hanging and the user hit ^C), the shell exits\nimmediately. This can be annoying if the test script did any\nglobal setup, like starting apache or git-daemon, as it will\nnot have an opportunity to clean up after itself. A\nsubsequent run of the test won't be able to start its own\ndaemon, and will either fail or skip the tests.\n\nInstead, let's trap SIGINT to make sure we do a clean\nshutdown, and just chain it to a normal exit (which will\ntrigger any cleanup).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/da706545f7a1fa97cd8d9cf40659ab2a167be7c0"
                },
                {
                    "sha": "025232e8aa4b56d450079528fcfbff53da3e7fa4",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t: redirect stderr GIT_TRACE to descriptor 4\n\nIf you run a test script like:\n\n  GIT_TRACE=1 ./t0061-run-command.sh\n\nyou may get test failures, because some tests capture and\ncheck the stderr output from git commands (and with\nGIT_TRACE set to 1, the trace output will be included\nthere).\n\nWhen we see GIT_TRACE set like this, we print a warning to\nthe user. However, we can do even better than that by just\npointing it to descriptor 4, which all tests leave connected\nto the test script's stderr. That's likely what the user\nintended (and any scripts that do want to see GIT_TRACE\noutput will set GIT_TRACE themselves).\n\nNot only does this avoid false negatives in the tests, but\nit means the user will actually see trace output for git\ncalls that redirect their stderr (whereas before, it was\nsometimes confusingly buried in a file).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/025232e8aa4b56d450079528fcfbff53da3e7fa4"
                },
                {
                    "sha": "89c57ab3f0168b192d5ccc159972fdb26e0ba80b",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t: pass GIT_TRACE through Apache\n\nApache removes GIT_TRACE from the environment before running\ngit-http-backend. This can make it hard to debug the server\nside of an http session. Let's let it through.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/89c57ab3f0168b192d5ccc159972fdb26e0ba80b"
                },
                {
                    "sha": "9a308de37c485068d6470d4c51e231a36e651e98",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t5541: move run_with_cmdline_limit to test-lib.sh\n\nWe use this to test http pushing with a restricted\ncommandline. Other scripts (like t5551, which does http\nfetching) will want to use it, too.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/9a308de37c485068d6470d4c51e231a36e651e98"
                },
                {
                    "sha": "376e4b39d4453ce50cbacc9c46a3bbdaad2134b2",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t5551: make EXPENSIVE test cheaper\n\nWe create 50,000 tags to check that we don't overflow the\ncommand-line of fetch-pack. But by using run_with_cmdline_limit,\nwe can get the same effect with a much smaller number of\ntags. This makes the test fast enough that we can drop the\nEXPENSIVE prereq, which means people will actually run it.\n\nIt was not documented to do so, but this test was also the\nonly test of a clone-over-http that requires multiple POSTs\nduring the conversation. We can continue to test that by\ndropping http.postbuffer to its minimum size, and checking\nthat we get two POSTs.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/376e4b39d4453ce50cbacc9c46a3bbdaad2134b2"
                },
                {
                    "sha": "f7711b353572616e7d2fdff7a3cc5f757d314eb8",
                    "author": {
                        "email": "adrien+dev@schischi.me",
                        "name": "Adrien Schildknecht"
                    },
                    "message": "userdiff: funcname and word patterns for sh\n\nAdd regexp based on the \"Shell Command Language\" specifications.\nBecause of the lax syntax of sh, some corner cases may not be\nhandled properly.\n\nSigned-off-by: Adrien Schildknecht <adrien+dev@schischi.me>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/f7711b353572616e7d2fdff7a3cc5f757d314eb8"
                },
                {
                    "sha": "da0005b8853137c91e44867d899910d5c7eb4425",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "*config.txt: stick to camelCase naming convention\n\nThis should improve readability. Compare \"thislongname\" and\n\"thisLongName\". The following keys are left in unchanged. We can\ndecide what to do with them later.\n\n - am.keepcr\n - core.autocrlf .safecrlf .trustctime\n - diff.dirstat .noprefix\n - gitcvs.usecrlfattr\n - gui.blamehistoryctx .trustmtime\n - pull.twohead\n - receive.autogc\n - sendemail.signedoffbycc .smtpsslcertpath .suppresscc\n\nHelped-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/da0005b8853137c91e44867d899910d5c7eb4425"
                },
                {
                    "sha": "34aedc3baa8fa214b64ce04227ff8e0c4ddf0c78",
                    "author": {
                        "email": "codemister99@yahoo.com",
                        "name": "Cody A Taylor"
                    },
                    "message": "git prompt: use toplevel to find untracked files\n\nThe __git_ps1() prompt function would not show an untracked\nstate when the current working directory was not a parent of\nthe untracked file.\n\nSigned-off-by: Cody A Taylor <codemister99@yahoo.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/34aedc3baa8fa214b64ce04227ff8e0c4ddf0c78"
                },
                {
                    "sha": "5f7817c85d4b5f65626c8f49249a6c91292b8513",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "define a structure for object IDs\n\nMany places throughout the code use \"unsigned char [20]\" to store object IDs\n(SHA-1 values).  This leads to lots of hardcoded numbers throughout the\ncodebase.  It also leads to confusion about the purposes of a buffer.\n\nIntroduce a structure for object IDs.  This allows us to obtain the benefits\nof compile-time checking for misuse.  The structure is expected to remain\nthe same size and have the same alignment requirements on all known\nplatforms, compared to the array of unsigned char, although this is not\nrequired for correctness.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5f7817c85d4b5f65626c8f49249a6c91292b8513"
                },
                {
                    "sha": "aa1c6fdf478c023180e5ca5f1658b00a72592dc6",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "define utility functions for object IDs\n\nThere are several utility functions (hashcmp and friends) that are used\nfor comparing object IDs (SHA-1 values).  Using these functions, which\ntake pointers to unsigned char, with struct object_id requires tiresome\naccess to the sha1 member, which bloats code and violates the desired\nencapsulation.  Provide wrappers around these functions for struct\nobject_id for neater, more maintainable code.  Use the new constants to\navoid the hard-coded 20s and 40s throughout the original functions.\n\nThese functions simply call the underlying pointer-to-unsigned-char\nversions to ensure that any performance improvements will be passed\nthrough to the new functions.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/aa1c6fdf478c023180e5ca5f1658b00a72592dc6"
                },
                {
                    "sha": "3c5ff9956c017e1737fdc350dbec160277be4fc1",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "bisect.c: convert leaf functions to use struct object_id\n\nConvert some constants to GIT_SHA1_HEXSZ.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3c5ff9956c017e1737fdc350dbec160277be4fc1"
                },
                {
                    "sha": "13609673c4410df754197ec4ae9b57f15bc803d4",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "archive.c: convert to use struct object_id\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/13609673c4410df754197ec4ae9b57f15bc803d4"
                },
                {
                    "sha": "aeecdcd4c1c1a380e45aecadd8042a6a90ee3a20",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "zip: use GIT_SHA1_HEXSZ for trailers\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/aeecdcd4c1c1a380e45aecadd8042a6a90ee3a20"
                },
                {
                    "sha": "fa33c3aae238c683b2b15989b9d7f88df19fa93d",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "bulk-checkin.c: convert to use struct object_id\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/fa33c3aae238c683b2b15989b9d7f88df19fa93d"
                },
                {
                    "sha": "1ff57c13c54bc9d548178e012f77717f87f2655d",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "diff: convert struct combine_diff_path to object_id\n\nAlso, convert a constant to GIT_SHA1_HEXSZ.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/1ff57c13c54bc9d548178e012f77717f87f2655d"
                },
                {
                    "sha": "7683e2e6e301835236539a33b2fba936dd1a0a2b",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "commit: convert parts to struct object_id\n\nConvert struct commit_graft and necessary local parts of commit.c.\nAlso, convert several constants based on the hex length of an SHA-1 to\nuse GIT_SHA1_HEXSZ, and move several magic constants into variables for\nreadability.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/7683e2e6e301835236539a33b2fba936dd1a0a2b"
                },
                {
                    "sha": "1a876a69af6552d16827ecc1931c42e2287a83a0",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "patch-id: convert to use struct object_id\n\nConvert some magic numbers to the new GIT_SHA1 constants.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/1a876a69af6552d16827ecc1931c42e2287a83a0"
                },
                {
                    "sha": "d07d4ab401173a10173f2747cf5e0f074b6d2b39",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "apply: convert threeway_stage to object_id\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/d07d4ab401173a10173f2747cf5e0f074b6d2b39"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:09:31Z"
    },
    {
        "id": "2648761863",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "ref": "jk/smart-http-hide-refs",
            "ref_type": "branch",
            "master_branch": "master",
            "description": "Git - the stupid content tracker - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-14T07:09:30Z"
    },
    {
        "id": "2648761859",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 601859682,
            "size": 38,
            "distinct_size": 0,
            "ref": "refs/heads/maint",
            "head": "bb8577532add843833ebf8b5324f94f84cb71ca0",
            "before": "1165ae6f3d42e0eb0ddfc2d4e6dfa8bd0b88eb60",
            "commits": [
                {
                    "sha": "c536c0755f6450b7bcce499cfda171f8c6d1e593",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "apply: reject input that touches outside the working area\n\nBy default, a patch that affects outside the working area (either a\nGit controlled working tree, or the current working directory when\n\"git apply\" is used as a replacement of GNU patch) is rejected as a\nmistake (or a mischief).  Git itself does not create such a patch,\nunless the user bends over backwards and specifies a non-standard\nprefix to \"git diff\" and friends.\n\nWhen `git apply` is used as a \"better GNU patch\", the user can pass\nthe `--unsafe-paths` option to override this safety check. This\noption has no effect when `--index` or `--cached` is in use.\n\nThe new test was stolen from Jeff King with slight enhancements.\nNote that a few new tests for touching outside the working area by\nfollowing a symbolic link are still expected to fail at this step,\nbut will be fixed in later steps.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/c536c0755f6450b7bcce499cfda171f8c6d1e593"
                },
                {
                    "sha": "3c37a2e339e695c7cc41048fe0921cbc8b48b0f0",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "apply: do not read from the filesystem under --index\n\nWe currently read the preimage to apply a patch from the index only\nwhen the --cached option is given.  Do so also when the command is\nrunning under the --index option.  With --index, the index entry and\nthe working tree file for a path that is involved in a patch must be\nidentical, so this should not affect the result, but by reading from\nthe index, we will get the protection to avoid reading an unintended\npath beyond a symbolic link automatically.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3c37a2e339e695c7cc41048fe0921cbc8b48b0f0"
                },
                {
                    "sha": "fdc2c3a926c21e24986677abd02c8bc568a5de32",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "apply: do not read from beyond a symbolic link\n\nWe should reject a patch, whether it renames/copies dir/file to\nelsewhere with or without modificiation, or updates dir/file in\nplace, if \"dir/\" part is actually a symbolic link to elsewhere,\nby making sure that the code to read the preimage does not read\nfrom a path that is beyond a symbolic link.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/fdc2c3a926c21e24986677abd02c8bc568a5de32"
                },
                {
                    "sha": "e0d201b61601e17e24ed00cc3d16e8e25ca68596",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "apply: do not touch a file beyond a symbolic link\n\nBecause Git tracks symbolic links as symbolic links, a path that\nhas a symbolic link in its leading part (e.g. path/to/dir/file,\nwhere path/to/dir is a symbolic link to somewhere else, be it\ninside or outside the working tree) can never appear in a patch\nthat validly applies, unless the same patch first removes the\nsymbolic link to allow a directory to be created there.\n\nDetect and reject such a patch.\n\nThings to note:\n\n - Unfortunately, we cannot reuse the has_symlink_leading_path()\n   from dir.c, as that is only about the working tree, but \"git\n   apply\" can be told to apply the patch only to the index or to\n   both the index and to the working tree.\n\n - We cannot directly use has_symlink_leading_path() even when we\n   are applying only to the working tree, as an early patch of a\n   valid input may remove a symbolic link path/to/dir and then a\n   later patch of the input may create a path path/to/dir/file, but\n   \"git apply\" first checks the input without touching either the\n   index or the working tree.  The leading symbolic link check must\n   be done on the interim result we compute in-core (i.e. after the\n   first patch, there is no path/to/dir symbolic link and it is\n   perfectly valid to create path/to/dir/file).\n\n   Similarly, when an input creates a symbolic link path/to/dir and\n   then creates a file path/to/dir/file, we need to flag it as an\n   error without actually creating path/to/dir symbolic link in the\n   filesystem.\n\nInstead, for any patch in the input that leaves a path (i.e. a non\ndeletion) in the result, we check all leading paths against the\nresulting tree that the patch would create by inspecting all the\npatches in the input and then the target of patch application\n(either the index or the working tree).\n\nThis way, we catch a mischief or a mistake to add a symbolic link\npath/to/dir and a file path/to/dir/file at the same time, while\nallowing a valid patch that removes a symbolic link path/to/dir and\nthen adds a file path/to/dir/file.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/e0d201b61601e17e24ed00cc3d16e8e25ca68596"
                },
                {
                    "sha": "f2b4f0a23b400f5760deb9251296d79eba83ab78",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t4008: correct stale comments\n\nA complete rewrite of a single file was originally designed to be\nexpressed as a deletion immediately followed by a creation of the\nsame file, and the comments in the test updated here were written to\nreflect that design decision made in f345b0a0 (Add -B flag to diff-*\nbrothers., 2005-05-30).  However, we later realized that a complete\nrewrite is merely how a textual diff should be represented at\n366175ef (Rework -B output., 2005-06-19), and updated the actual\ntests.  But we forgot to update the introductory text while doing\nso.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/f2b4f0a23b400f5760deb9251296d79eba83ab78"
                },
                {
                    "sha": "2c0ab4d49d294aa9127ce5616d2d6c4d12be8e74",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t9300: correct expected object names\n\nThe output the test #36 expects is bogus.  There are no blob objects\nwhose names are 36a590... or 046d037... when this test was run.\n\nIt was left unnoticed only because compare_diff_raw, which only\ncares about the add/delete/rename/copy was used to check the result.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/2c0ab4d49d294aa9127ce5616d2d6c4d12be8e74"
                },
                {
                    "sha": "bb8db1b5538a455a0892312b25d73d51f2650429",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t4010: correct expected object names\n\nThe output the test expects is bogus.\n\nIt was left unnoticed only because compare_diff_raw, which only\ncares about the add/delete/rename/copy was used to check the result.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/bb8db1b5538a455a0892312b25d73d51f2650429"
                },
                {
                    "sha": "459b8d22e544b3876a2270ee7290c289a39ebbb2",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "tests: do not borrow from COPYING and README from the real source\n\nThese two files have been modified since the tests started using\nas test input, making the exact object names they expect to be\ndifferent from what actually happens in the trash repository they\nuse to run tests.\n\nInstead, take a snapshot of these two files and keep them in\nt/diff-lib/ so that we can update the real ones without having to\nworry about breaking tests.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/459b8d22e544b3876a2270ee7290c289a39ebbb2"
                },
                {
                    "sha": "bd9150b7e5f34d7148b02ca2eed96270c7744049",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t/diff-lib: check exact object names in compare_diff_raw\n\nThe \"sanitize\" helper wanted to strip the similarity and\ndissimilarity scores when making comparison, but it was\nstripping away the object names as well.\n\nWhile we do not want to require the exact object names the tests\nexpect to be maintained, as it would be seen as an extra burden,\nthis would have prevented us catching a silly bug such as showing\nnon 0{40} object name on the preimage side of an addition or on the\npostimage side of a deletion, because all [0-9a-f]{40} strings were\nconsidered equally OK.\n\nIn the longer term, when a test only wants to see the status of the\nchange without having to worry about object names, it should be\nrewritten not to inspect the raw format.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/bd9150b7e5f34d7148b02ca2eed96270c7744049"
                },
                {
                    "sha": "db7b9e3ad39a4135072a1fd619b76d1c1093b501",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t4008: modernise style\n\nUpdate this ancient test script to a more modern style in which the\nexpected result is prepared inside the body of the test that uses\nit.  Also, instead of using $tree, a shell variable, throughout the\ntest script, create a tag that points at it, to make it easier to\nmanually debug the test script in its trash directory.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/db7b9e3ad39a4135072a1fd619b76d1c1093b501"
                },
                {
                    "sha": "94bc83c5930c8c73fb0106b629123e2413b371af",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "git_connect: let user override virtual-host we send to daemon\n\nWhen we connect to a git-daemon at a given host and port, we\nactually send the string \"localhost:9418\" to the other side,\nwhich allows it to do virtual-hosting lookups. For testing\nand debugging, we'd like to be able to send arbitrary\nstrings, rather than the hostname we actually connected to.\n\nUsing \"insteadOf\" config does not work for this purpose, as\nthe hostname determination happens at a very low level,\nright before we feed the hostname to our lookup routines.\nYou could use /etc/hosts or similar to get around this, but\nwe cannot do that portably from our test suite.\n\nInstead, this patch provides an environment variable that\ncan be used to send an arbitrary string.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/94bc83c5930c8c73fb0106b629123e2413b371af"
                },
                {
                    "sha": "5248f2dd4fe763ef9d1267f50481deee36ee57c1",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t5570: test git-daemon's --interpolated-path option\n\nWe did not test this at all; let's just give a basic sanity\ncheck that we can find a path based on virtual hosting, and\nthat the downcase canonicalization works.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5248f2dd4fe763ef9d1267f50481deee36ee57c1"
                },
                {
                    "sha": "b48537305229d1a4f25633f71941ee52d2582017",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "daemon: sanitize incoming virtual hostname\n\nWe use the daemon_avoid_alias function to make sure that the\npathname the user gives us is sane. However, after applying\nthat check, we might then interpolate the path using a\nstring given by the server admin, but which may contain more\nuntrusted data from the client. We should be sure to\nsanitize this data, as well.\n\nWe cannot use daemon_avoid_alias here, as it is more strict\nthan we need in requiring a leading '/'. At the same time,\nwe can be much more strict here. We are interpreting a\nhostname, which should not contain slashes or excessive runs\nof dots, as those things are not allowed in DNS names.\n\nNote that in addition to cleansing the hostname field, we\nmust check the \"canonical hostname\" (%CH) as well as the\nport (%P), which we take as a raw string.  For the canonical\nhostname, this comes from an actual DNS lookup on the\naccessed IP, which makes it a much less likely vector for\nproblems. But it does not hurt to sanitize it in the same\nway. Unfortunately we cannot test this case easily, as it\nwould involve a custom hostname lookup.\n\nWe do not need to check %IP, as it comes straight from\ninet_ntop, so must have a sane form.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/b48537305229d1a4f25633f71941ee52d2582017"
                },
                {
                    "sha": "edef953e482ce212b7d68bbe0f59e34b5552db3e",
                    "author": {
                        "email": "l.s.r@web.de",
                        "name": "René Scharfe"
                    },
                    "message": "daemon: look up client-supplied hostname lazily\n\nLook up canonical hostname and IP address using getaddrinfo(3) or\ngethostbyname(3) only if --interpolated-path or --access-hook were\nspecified.\n\nDo that by introducing getter functions for canon_hostname and\nip_address and using them for all read accesses.  These wrappers call\nthe new helper lookup_hostname(), which sets the variables only at its\nfirst call.\n\nSigned-off-by: Rene Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/edef953e482ce212b7d68bbe0f59e34b5552db3e"
                },
                {
                    "sha": "dc8edc8f7d503b96dc4ceb275f7f6ca7637be5a9",
                    "author": {
                        "email": "l.s.r@web.de",
                        "name": "René Scharfe"
                    },
                    "message": "daemon: use callback to build interpolated path\n\nProvide a callback function for strbuf_expand() instead of using the\nhelper strbuf_expand_dict_cb().  While the resulting code is longer, it\nonly looks up the canonical hostname and IP address if at least one of\nthe placeholders %CH and %IP are used with --interpolated-path.\n\nUse a struct for passing the directory to the callback function instead\nof passing it directly to avoid having to cast away its const qualifier.\n\nSigned-off-by: Rene Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/dc8edc8f7d503b96dc4ceb275f7f6ca7637be5a9"
                },
                {
                    "sha": "817d03e10552c03fce7483df5034d72f883b2fab",
                    "author": {
                        "email": "j6t@kdbg.org",
                        "name": "Johannes Sixt"
                    },
                    "message": "test_ln_s_add: refresh stat info of fake symbolic links\n\nWe have a helper function test_ln_s_add that inserts a symbolic link\ninto the index even if the file system does not support symbolic links.\nThere is a small flaw in the emulation path: the added entry does not\npick up stat information of the fake symbolic link from the file system,\nas a consequence, the index is not exactly the same as for the \"regular\"\npath (where symbolic links are available). To fix this, just call\ngit update-index again.\n\nThis flaw was revealed by the earlier change that tightened\ncompare_diff_raw(), because a test case in t4008 depends on the\ncorrectly updated index.\n\nSigned-off-by: Johannes Sixt <j6t@kdbg.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/817d03e10552c03fce7483df5034d72f883b2fab"
                },
                {
                    "sha": "bcd57cb9e1583fe5174112422caba0397f7ae5f6",
                    "author": {
                        "email": "mikko.rapeli@iki.fi",
                        "name": "Mikko Rapeli"
                    },
                    "message": "Documentation/git-clean.txt: document that -f may need to be given twice\n\nThis is needed in build automation where the tree really needs to\nbe reset to known state.\n\nSigned-off-by: Mikko Rapeli <mikko.rapeli@iki.fi>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/bcd57cb9e1583fe5174112422caba0397f7ae5f6"
                },
                {
                    "sha": "77fdb8a82cc624bb3c720b87725abae4d0df5073",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "grep: correct help string for --exclude-standard\n\nThe current help string is about --no-exclude-standard. But \"git grep -h\"\nwould show --exclude-standard instead. Flip the string. See 0a93fb8\n(grep: teach --untracked and --exclude-standard options - 2011-09-27)\nfor more info about these options.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/77fdb8a82cc624bb3c720b87725abae4d0df5073"
                },
                {
                    "sha": "f98c2f7e53062a59f67914337c0b45c82393e11f",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "diffcore-rename: split locate_rename_dst into two functions\n\nThis function manages the mapping of destination pathnames\nto filepairs, and it handles both insertion and lookup. This\nmakes the return value a bit confusing, as we return a newly\ncreated entry (even though no caller cares), and have no\nroom to indicate to the caller that an entry already\nexisted.\n\nInstead, let's break this up into two distinct functions,\nboth backed by a common binary search. The binary search\nwill use our normal \"return the index if we found something,\nor negative index minus one to show where it would have\ngone\" semantics.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/f98c2f7e53062a59f67914337c0b45c82393e11f"
                },
                {
                    "sha": "4d6be03b95c3db21db1bb8fee01128c1b13f70e7",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "diffcore-rename: avoid processing duplicate destinations\n\nThe rename code cannot handle an input where we have\nduplicate destinations (i.e., more than one diff_filepair in\nthe queue with the same string in its pair->two->path). We\nend up allocating only one slot in the rename_dst mapping.\nIf we fill in the diff_filepair for that slot, when we\nre-queue the results, we may queue that filepair multiple\ntimes. When the diff is finally flushed, the filepair is\nprocessed and free()d multiple times, leading to heap\ncorruption.\n\nThis situation should only happen when a tree diff sees\nduplicates in one of the trees (see the added test for a\ndetailed example). Rather than handle it, the sanest thing\nis just to turn off rename detection altogether for the\ndiff.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/4d6be03b95c3db21db1bb8fee01128c1b13f70e7"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:09:30Z"
    },
    {
        "id": "2648761835",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "ref": "bc/object-id",
            "ref_type": "branch",
            "master_branch": "master",
            "description": "Git - the stupid content tracker - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-14T07:09:27Z"
    },
    {
        "id": "2648761831",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 2535564,
            "name": "gitster/git-htmldocs",
            "url": "https://api.github.com/repos/gitster/git-htmldocs"
        },
        "payload": {
            "push_id": 601859668,
            "size": 1,
            "distinct_size": 1,
            "ref": "refs/heads/master",
            "head": "8881c953289d65993118e749cd64b64ad912b48b",
            "before": "185e718a0d232c3aed7ff4ed09733ba88dccf98d",
            "commits": [
                {
                    "sha": "8881c953289d65993118e749cd64b64ad912b48b",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Autogenerated HTML docs for v2.3.3-199-g52cae",
                    "distinct": true,
                    "url": "https://api.github.com/repos/gitster/git-htmldocs/commits/8881c953289d65993118e749cd64b64ad912b48b"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:09:27Z"
    },
    {
        "id": "2648761814",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "ref": "nd/config-doc-camelCase",
            "ref_type": "branch",
            "master_branch": "master",
            "description": "Git - the stupid content tracker - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-14T07:09:25Z"
    },
    {
        "id": "2648761813",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 601859659,
            "size": 45,
            "distinct_size": 9,
            "ref": "refs/heads/next",
            "head": "dac11456999723012aeb1167e3d09a83b1e0f740",
            "before": "e53910a3a87faf247e84e9c3dc849210d293759c",
            "commits": [
                {
                    "sha": "05c3e5c7719a4b25237d00a696877bdd47488678",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: avoid unnecessary negation\n\nSection names and variable names are both case-insensitive, but one\nis described as \"not case sensitive\".  Use \"case-insensitive\" for\nboth.\n\nInstead of saying \"... have to be escaped\" without telling what that\nescaping achieves, state it in a more positive way, i.e. \"... can be\nincluded by escaping\".\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/05c3e5c7719a4b25237d00a696877bdd47488678"
                },
                {
                    "sha": "a5285b6c231b55e71007d89a4a29b151302abe09",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: explain multi-valued variables once\n\nThe syntax section repeats what the preamble explained already.\nThat a variable can have multiple values is more about what a\nvariable is than the syntax of the file.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/a5285b6c231b55e71007d89a4a29b151302abe09"
                },
                {
                    "sha": "ff5507ed2a34f0eb8c8d4f0bd300d2b786031aff",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: describe the structure first and then meaning\n\nA line can be continued via a backquote-LF and can be chomped at a\ncomment character.  But that is not specific to string-typed values.\nIt is common to all, just like unquoted leading and trailing\nwhitespaces are stripped and inter-word spacing are retained.\n\nMove the description around and desribe these structural rules\nfirst, then introduce the double-quote facility as a way to override\nthem, and finally mention various types of values.\n\nNote that these structural rules only apply to the value part of the\nconfiguration file.  E.g.\n\n    [aSection] \\\n        name \\\n\t= value\n\ndoes not work, because the rules kick in only after seeing \"name =\".\nBoth the original and the updated text are phrased in an awkward way\nby singling out the \"value\" part of the line because of this.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/ff5507ed2a34f0eb8c8d4f0bd300d2b786031aff"
                },
                {
                    "sha": "5f7b91baca0693e80fa9230a2008107aa4779743",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: have a separate \"Values\" section\n\nThe various types of values set to the configuration variables\ndeserve more than a brief footnote mention in the syntax section,\nand it will be more so after the later steps of this clean up\neffort.\n\nMove the mention of booleans from the syntax section to this new\nsection, and describe how human-readble integers can be spelled with\nscaling there.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5f7b91baca0693e80fa9230a2008107aa4779743"
                },
                {
                    "sha": "b92c1a28f832ede499a4f7e167d46cd5b2192fe4",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: describe 'color' value type in the \"Values\" section\n\nInstead of describing it for color.branch.<slot> and have everybody\nelse refer to it, explain how colors are spelled in \"Values\" section\nupfront.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/b92c1a28f832ede499a4f7e167d46cd5b2192fe4"
                },
                {
                    "sha": "1c448b3b5c283d793d994808d0ec1174b9b4dc26",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: simplify boolean description in the syntax section\n\nThe 'true' short-hand doesn't deserve a separate sentence; even our own\n\n    git config --bool foo.bar yes\n\nwould not produce it.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/1c448b3b5c283d793d994808d0ec1174b9b4dc26"
                },
                {
                    "sha": "5ee875852e3cb41c21c2e89a636fc1e40c4012b1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "log --decorate: do not leak \"commit\" color into the next item\n\nIn \"git log --decorate\", you would see the commit header like this:\n\n    commit ... (HEAD, jc/decorate-leaky-separator-color)\n\nwhere \"commit ... (\" is painted in color.diff.commit, \"HEAD\" in\ncolor.decorate.head, \", \" in color.diff.commit, the branch name in\ncolor.decorate.branch and then closing \")\" in color.diff.commit.\n\nIf you wanted to paint the HEAD and local branch name in the same\ncolor as the body text (perhaps because cyan and green are too faint\non a black-on-white terminal to be readable), you would not want to\nhave to say\n\n    [color \"decorate\"]\n        head = black\n        branch = black\n\nbecause that you would not be able to reuse same configuration on a\nwhite-on-black terminal.  You would naively expect\n\n    [color \"decorate\"]\n        head = normal\n\tbranch = normal\n\nto work, but unfortunately it does not.  It paints the string \"HEAD\"\nand the branch name in the same color as the opening parenthesis or\ncomma between the decoration elements.  This is because the code\nforgets to reset the color after printing the \"prefix\" in its own\ncolor.\n\nIt theoretically is possible that some people were expecting and\nrelying on that the attribute set as the \"diff.commit\" color, which\nis used to draw these opening parenthesis and inter-item comma, is\ninherited by the drawing of branch names, but it is not how the\ncoloring works everywhere else.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5ee875852e3cb41c21c2e89a636fc1e40c4012b1"
                },
                {
                    "sha": "130e475e1f8aa72e48dde43159a28232ff31fee6",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "git-instaweb: allow running in a working tree subdirectory\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/130e475e1f8aa72e48dde43159a28232ff31fee6"
                },
                {
                    "sha": "ff7a9dc2c503360190650d604dbdbc293d99b765",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "git-instaweb: use @SHELL_PATH@ instead of /bin/sh\n\nIf the user has configured a value for SHELL_PATH then\nbe sure to use it for any generated scripts instead of\nhard-coding /bin/sh.\n\nThe first line of the script is handled specially, but\nthe embedded #!/bin/sh line in the here document will\nnot be automatically updated unless it uses @SHELL_PATH@.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/ff7a9dc2c503360190650d604dbdbc293d99b765"
                },
                {
                    "sha": "1b56cdf901f6e6a73d0edadf56afb1c878c7622a",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "git-compat-util.h: move SHELL_PATH default into header\n\nIf SHELL_PATH is not defined we use \"/bin/sh\".  However,\nrun-command.c is not the only file that needs to use\nthe default value so move it into a common header.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/1b56cdf901f6e6a73d0edadf56afb1c878c7622a"
                },
                {
                    "sha": "b680a86a86f44444643b9be5bf4822feda128cd0",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "help.c: use SHELL_PATH instead of hard-coded \"/bin/sh\"\n\nIf the user has set SHELL_PATH in the Makefile then we\nshould respect that value and use it.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/b680a86a86f44444643b9be5bf4822feda128cd0"
                },
                {
                    "sha": "9529080de253b89474402f323e10470656764b3a",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "configure: support HAVE_BSD_SYSCTL option\n\nOn BSD-compatible systems some information such as the number\nof available CPUs may only be available via the sysctl function.\n\nAdd support for a HAVE_BSD_SYSCTL option complete with autoconf\nsupport and include the sys/syctl.h header when the option is\nenabled to make the sysctl function available.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/9529080de253b89474402f323e10470656764b3a"
                },
                {
                    "sha": "a25b5a32c76630f2433b860fef7bc28a9380a8f6",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "thread-utils.c: detect CPU count on older BSD-like systems\n\nNot all systems support using sysconf to detect the number\nof available CPU cores.  Older BSD and BSD-derived systems\nonly provide the information via the sysctl function.\n\nIf HAVE_BSD_SYSCTL is defined attempt to retrieve the number\nof available CPU cores using the sysctl function.\n\nIf HAVE_BSD_SYSCTL is not defined or the sysctl function\nfails, we still attempt to get the information via sysconf.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/a25b5a32c76630f2433b860fef7bc28a9380a8f6"
                },
                {
                    "sha": "4ab682e213d292fb921d21d25208a74ce47e2c19",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jc/decorate-leaky-separator-color' into HEAD\n\n* jc/decorate-leaky-separator-color:\n  log --decorate: do not leak \"commit\" color into the next item\n  Documentation/config.txt: simplify boolean description in the syntax section\n  Documentation/config.txt: describe 'color' value type in the \"Values\" section\n  Documentation/config.txt: have a separate \"Values\" section\n  Documentation/config.txt: describe the structure first and then meaning\n  Documentation/config.txt: explain multi-valued variables once\n  Documentation/config.txt: avoid unnecessary negation",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/4ab682e213d292fb921d21d25208a74ce47e2c19"
                },
                {
                    "sha": "51ff0f27bc6bfe83da7304ef9db77f3a2a4a47b0",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "log: decorate HEAD with branch name\n\nCurrently, log decorations do not indicate which branch is checked out\nand whether HEAD is detached.\n\nWhen branch foo is checked out, change the \"HEAD, foo\" part of the\ndecorations to \"HEAD -> foo\". This serves to indicate both ref\ndecorations (helped by the spacing) as well as their relationshsip.\nAs a consequence, \"HEAD\" without any \" -> \" denotes a detached HEAD now.\n\nSigned-off-by: Michael J Gruber <git@drmicha.warpmail.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/51ff0f27bc6bfe83da7304ef9db77f3a2a4a47b0"
                },
                {
                    "sha": "dcd01ea187fc9a936b4083a85343989840afd7bd",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "imap-send: use cURL automatically when NO_OPENSSL defined\n\nIf both USE_CURL_FOR_IMAP_SEND and NO_OPENSSL are defined do\nnot force the user to add --curl to get a working git imap-send\ncommand.\n\nInstead automatically select --curl and warn and ignore the\n--no-curl option.  And while we're in there, correct the\nwarning message when --curl is requested but not supported.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/dcd01ea187fc9a936b4083a85343989840afd7bd"
                },
                {
                    "sha": "ce026cc7e2ff729c9809fef860cd696d1f7bb06c",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "t5528: do not fail with FreeBSD shell\n\nThe FreeBSD shell converts this expression:\n\n  git ${1:+-c push.default=\"$1\"} push\n\nto this when \"$1\" is not empty:\n\n  git \"-c push.default=$1\" push\n\nwhich causes git to fail.  To avoid this we simply break up the\nexpansion into two parts so that the whitespace which creates\ntwo arguments instead of one is outside the ${...} like so:\n\n  git ${1:+-c} ${1:+push.default=\"$1\"} push\n\nThis has the desired effect on all platforms allowing the test\nto pass on FreeBSD.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/ce026cc7e2ff729c9809fef860cd696d1f7bb06c"
                },
                {
                    "sha": "3f88c1b524b47560a8ef520d7d702c95261d0a97",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "t7510: do not fail when gpg warns about insecure memory\n\nDepending on how gpg was built, it may issue the following\nmessage to stderr when run:\n\n  Warning: using insecure memory!\n\nWhen the test is collecting gpg output it is therefore not\nenough to just match on a \"gpg: \" prefix it must also match\non a \"Warning: \" prefix wherever it needs to match lines\nthat have been produced by gpg.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nAcked-by: Michael J Gruber <git@drmicha.warpmail.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/3f88c1b524b47560a8ef520d7d702c95261d0a97"
                },
                {
                    "sha": "04f20c04c6e51ee061a44406b9a73bf54683d8eb",
                    "author": {
                        "email": "sbeller@google.com",
                        "name": "Stefan Beller"
                    },
                    "message": "connect.c: do not leak \"conn\" after showing diagnosis\n\nWhen git_connect() is called to see how the URL is parsed for\ndebugging purposes with CONNECT_DIAG_URL set, the variable conn is\nleaked.  At this point in the codeflow, it only has its memory and\nno other resource is associated with it, so it is sufficient to\nclean it up by just freeing it.\n\nSigned-off-by: Stefan Beller <sbeller@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/04f20c04c6e51ee061a44406b9a73bf54683d8eb"
                },
                {
                    "sha": "6f75d45b2412c646b74300f360361b319689e554",
                    "author": {
                        "email": "l.s.r@web.de",
                        "name": "René Scharfe"
                    },
                    "message": "use isxdigit() for checking if a character is a hexadecimal digit\n\nUse the standard function isxdigit() to make the intent clearer and\navoid using magic constants.\n\nSigned-off-by: Rene Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/6f75d45b2412c646b74300f360361b319689e554"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:09:25Z"
    },
    {
        "id": "2648761772",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "ref": "as/userdiff-sh",
            "ref_type": "branch",
            "master_branch": "master",
            "description": "Git - the stupid content tracker - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-14T07:09:22Z"
    },
    {
        "id": "2648761524",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 36502,
            "name": "git/git",
            "url": "https://api.github.com/repos/git/git"
        },
        "payload": {
            "push_id": 601859532,
            "size": 4,
            "distinct_size": 4,
            "ref": "refs/heads/todo",
            "head": "2e4bcd971a42a0fc58a3cf366c2998bc9d6ad328",
            "before": "05b63a7f5fe5002a8d8228f72adc245f81960f7f",
            "commits": [
                {
                    "sha": "a2eed2a33309fd070395010aef3b3de69d9753f9",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Meta/Announce: brief list of contributors\n\nBy popular demand, mention new and returning contributors in\nthe announcement.",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/a2eed2a33309fd070395010aef3b3de69d9753f9"
                },
                {
                    "sha": "6c5bf1261fdb85287d2357403c3e30cfb1381efe",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "What's cooking (2015/03 #04)",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/6c5bf1261fdb85287d2357403c3e30cfb1381efe"
                },
                {
                    "sha": "4785574868fb407eaadfd3be65dbe8dd99d90751",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Meta/Annouce: reword the credits section a bit",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/4785574868fb407eaadfd3be65dbe8dd99d90751"
                },
                {
                    "sha": "2e4bcd971a42a0fc58a3cf366c2998bc9d6ad328",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "What's cooking (2015/03 #05)",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/2e4bcd971a42a0fc58a3cf366c2998bc9d6ad328"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:08:53Z",
        "org": {
            "id": 18133,
            "login": "git",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/git",
            "avatar_url": "https://avatars.githubusercontent.com/u/18133?"
        }
    },
    {
        "id": "2648761285",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 36502,
            "name": "git/git",
            "url": "https://api.github.com/repos/git/git"
        },
        "payload": {
            "ref": "v2.3.3",
            "ref_type": "tag",
            "master_branch": "master",
            "description": "Git Source Code Mirror - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-14T07:08:23Z",
        "org": {
            "id": 18133,
            "login": "git",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/git",
            "avatar_url": "https://avatars.githubusercontent.com/u/18133?"
        }
    },
    {
        "id": "2648761284",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 36502,
            "name": "git/git",
            "url": "https://api.github.com/repos/git/git"
        },
        "payload": {
            "push_id": 601859432,
            "size": 14,
            "distinct_size": 0,
            "ref": "refs/heads/master",
            "head": "52cae643c5d49b7fa18a7a4c60c284f9ae2e2c71",
            "before": "7a9409cb0104466eba32162f5bc4e5ab46130f02",
            "commits": [
                {
                    "sha": "c722ba4814f34d02faed305e4cc6498c783543a9",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/daemon-interpolate' into maint\n\nThe \"interpolated-path\" option of \"git daemon\" inserted any string\nclient declared on the \"host=\" capability request without checking.\nSanitize and limit %H and %CH to a saner and a valid DNS name.\n\n* jk/daemon-interpolate:\n  daemon: sanitize incoming virtual hostname\n  t5570: test git-daemon's --interpolated-path option\n  git_connect: let user override virtual-host we send to daemon",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/c722ba4814f34d02faed305e4cc6498c783543a9"
                },
                {
                    "sha": "1469d9906833a8bd7d07a70ba8250c823716f20a",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'rs/daemon-interpolate' into maint\n\n\"git daemon\" looked up the hostname even when \"%CH\" and \"%IP\"\ninterpolations are not requested, which was unnecessary.\n\n* rs/daemon-interpolate:\n  daemon: use callback to build interpolated path\n  daemon: look up client-supplied hostname lazily",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/1469d9906833a8bd7d07a70ba8250c823716f20a"
                },
                {
                    "sha": "5244a31039dbb3fe0d544fc56100d0ccbc653131",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jc/apply-beyond-symlink' into maint\n\n\"git apply\" was not very careful about reading from, removing,\nupdating and creating paths outside the working tree (under\n--index/--cached) or the current directory (when used as a\nreplacement for GNU patch).\n\n* jc/apply-beyond-symlink:\n  apply: do not touch a file beyond a symbolic link\n  apply: do not read from beyond a symbolic link\n  apply: do not read from the filesystem under --index\n  apply: reject input that touches outside the working area",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/5244a31039dbb3fe0d544fc56100d0ccbc653131"
                },
                {
                    "sha": "30a52c1dcbb286214a0d59fb4b3df1d13d9d060d",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'ms/submodule-update-config-doc' into maint\n\nThe interaction between \"git submodule update\" and the\nsubmodule.*.update configuration was not clearly documented.\n\n* ms/submodule-update-config-doc:\n  submodule: improve documentation of update subcommand",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/30a52c1dcbb286214a0d59fb4b3df1d13d9d060d"
                },
                {
                    "sha": "a4b4f9b8e317844ef64ec073241d38c9a656b2c8",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'mk/diff-shortstat-dirstat-fix' into maint\n\n\"git diff --shortstat --dirstat=changes\" showed a dirstat based on\nlines that was never asked by the end user in addition to the\ndirstat that the user asked for.\n\n* mk/diff-shortstat-dirstat-fix:\n  diff --shortstat --dirstat: remove duplicate output",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/a4b4f9b8e317844ef64ec073241d38c9a656b2c8"
                },
                {
                    "sha": "3af1bcafffb0d462abf6208574059f72ce4d5b48",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'mg/doc-remote-tags-or-not' into maint\n\n\"git remote add\" mentioned \"--tags\" and \"--no-tags\" and was not\nclear that fetch from the remote in the future will use the default\nbehaviour when neither is given to override it.\n\n* mg/doc-remote-tags-or-not:\n  git-remote.txt: describe behavior without --tags and --no-tags",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/3af1bcafffb0d462abf6208574059f72ce4d5b48"
                },
                {
                    "sha": "2408f3b74b26580b9f197e4edd96e73b0fba41c5",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'nd/grep-exclude-standard-help-fix' into maint\n\nDescription given by \"grep -h\" for its --exclude-standard option\nwas phrased poorly.\n\n* nd/grep-exclude-standard-help-fix:\n  grep: correct help string for --exclude-standard",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/2408f3b74b26580b9f197e4edd96e73b0fba41c5"
                },
                {
                    "sha": "ae8ada450a9103d2fe94ac9baf072fd31de08c30",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'bw/kwset-use-unsigned' into maint\n\nThe borrowed code in kwset API did not follow our usual convention\nto use \"unsigned char\" to store values that range from 0-255.\n\n* bw/kwset-use-unsigned:\n  kwset: use unsigned char to store values with high-bit set",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/ae8ada450a9103d2fe94ac9baf072fd31de08c30"
                },
                {
                    "sha": "3aab60b3baefd79d113fdc83685ba38c71986538",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jk/diffcore-rename-duplicate' into maint\n\nA corrupt input to \"git diff -M\" can cause us to segfault.\n\n* jk/diffcore-rename-duplicate:\n  diffcore-rename: avoid processing duplicate destinations\n  diffcore-rename: split locate_rename_dst into two functions",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/3aab60b3baefd79d113fdc83685ba38c71986538"
                },
                {
                    "sha": "bb8f6de064a2b92febe06c5cbfcf98c686dce8a4",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jc/diff-test-updates' into maint\n\nTest clean-up.\n\n* jc/diff-test-updates:\n  test_ln_s_add: refresh stat info of fake symbolic links\n  t4008: modernise style\n  t/diff-lib: check exact object names in compare_diff_raw\n  tests: do not borrow from COPYING and README from the real source\n  t4010: correct expected object names\n  t9300: correct expected object names\n  t4008: correct stale comments",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/bb8f6de064a2b92febe06c5cbfcf98c686dce8a4"
                },
                {
                    "sha": "113bc160941c4bcc9211d32f17098ab5a2428fa4",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'ak/t5516-typofix' into maint\n\n* ak/t5516-typofix:\n  t5516: correct misspelled pushInsteadOf",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/113bc160941c4bcc9211d32f17098ab5a2428fa4"
                },
                {
                    "sha": "4b23b5d1afbc7fcd8bc744523f4c3ff06dbe25d1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'mr/doc-clean-f-f' into maint\n\nDocumentation update.\n\n* mr/doc-clean-f-f:\n  Documentation/git-clean.txt: document that -f may need to be given twice",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/4b23b5d1afbc7fcd8bc744523f4c3ff06dbe25d1"
                },
                {
                    "sha": "bb8577532add843833ebf8b5324f94f84cb71ca0",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Git 2.3.3\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/bb8577532add843833ebf8b5324f94f84cb71ca0"
                },
                {
                    "sha": "52cae643c5d49b7fa18a7a4c60c284f9ae2e2c71",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Sync with 2.3.3",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/52cae643c5d49b7fa18a7a4c60c284f9ae2e2c71"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:08:23Z",
        "org": {
            "id": 18133,
            "login": "git",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/git",
            "avatar_url": "https://avatars.githubusercontent.com/u/18133?"
        }
    },
    {
        "id": "2648761190",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 36502,
            "name": "git/git",
            "url": "https://api.github.com/repos/git/git"
        },
        "payload": {
            "push_id": 601859392,
            "size": 85,
            "distinct_size": 71,
            "ref": "refs/heads/pu",
            "head": "69a3822a654696832321a6e3290d3c49483b9aef",
            "before": "474f2d10de3111cb8b25f05c37c7f0518b70a818",
            "commits": [
                {
                    "sha": "e172755b1eeb061c8fafb5ae8e4e9e72f68a0cdd",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "upload-pack: fix transfer.hiderefs over smart-http\n\nWhen upload-pack advertises the refs (either for a normal,\nnon-stateless request, or for the initial contact in a\nstateless one), we call for_each_ref with the send_ref\nfunction as its callback. send_ref, in turn, calls\nmark_our_ref, which checks whether the ref is hidden, and\nsets OUR_REF or HIDDEN_REF on the object as appropriate.  If\nit is hidden, mark_our_ref also returns \"1\" to signal\nsend_ref that the ref should not be advertised.\n\nIf we are not advertising refs, (i.e., the follow-up\ninvocation by an http client to send its \"want\" lines), we\nuse mark_our_ref directly as a callback to for_each_ref. Its\nmarking does the right thing, but when it then returns \"1\"\nto for_each_ref, the latter interprets this as an error and\nstops iterating. As a result, we skip marking all of the\nrefs that come lexicographically after it. Any \"want\" lines\nfrom the client asking for those objects will fail, as they\nwere not properly marked with OUR_REF.\n\nTo solve this, we introduce a wrapper callback around\nmark_our_ref which always returns 0 (even if the ref is\nhidden, we want to keep iterating). We also tweak the\nsignature of mark_our_ref to exclude unnecessary parameters\nthat were present only to conform to the callback interface.\nThis should make it less likely for somebody to accidentally\nuse it as a callback in the future.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/e172755b1eeb061c8fafb5ae8e4e9e72f68a0cdd"
                },
                {
                    "sha": "8ddf3ca74f40bebd79cedba5ba82ca9f2eb33860",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "upload-pack: do not check NULL return of lookup_unknown_object\n\nWe check whether the return value of lookup_unknown_object\nis NULL, but some code paths dereference it before our\ncheck. This turns out not to be capable of causing a\nsegfault, though. The lookup_unknown_object function will\nnever return NULL, since the whole point is to allocate an\nobject struct if it does not find an existing one. So the\ncode here is not wrong, it is just confusing. Let's just\ndrop the NULL check.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/8ddf3ca74f40bebd79cedba5ba82ca9f2eb33860"
                },
                {
                    "sha": "da706545f7a1fa97cd8d9cf40659ab2a167be7c0",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t: translate SIGINT to an exit\n\nRight now if a test script receives SIGINT (e.g., because a\ntest was hanging and the user hit ^C), the shell exits\nimmediately. This can be annoying if the test script did any\nglobal setup, like starting apache or git-daemon, as it will\nnot have an opportunity to clean up after itself. A\nsubsequent run of the test won't be able to start its own\ndaemon, and will either fail or skip the tests.\n\nInstead, let's trap SIGINT to make sure we do a clean\nshutdown, and just chain it to a normal exit (which will\ntrigger any cleanup).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/da706545f7a1fa97cd8d9cf40659ab2a167be7c0"
                },
                {
                    "sha": "025232e8aa4b56d450079528fcfbff53da3e7fa4",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t: redirect stderr GIT_TRACE to descriptor 4\n\nIf you run a test script like:\n\n  GIT_TRACE=1 ./t0061-run-command.sh\n\nyou may get test failures, because some tests capture and\ncheck the stderr output from git commands (and with\nGIT_TRACE set to 1, the trace output will be included\nthere).\n\nWhen we see GIT_TRACE set like this, we print a warning to\nthe user. However, we can do even better than that by just\npointing it to descriptor 4, which all tests leave connected\nto the test script's stderr. That's likely what the user\nintended (and any scripts that do want to see GIT_TRACE\noutput will set GIT_TRACE themselves).\n\nNot only does this avoid false negatives in the tests, but\nit means the user will actually see trace output for git\ncalls that redirect their stderr (whereas before, it was\nsometimes confusingly buried in a file).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/025232e8aa4b56d450079528fcfbff53da3e7fa4"
                },
                {
                    "sha": "89c57ab3f0168b192d5ccc159972fdb26e0ba80b",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t: pass GIT_TRACE through Apache\n\nApache removes GIT_TRACE from the environment before running\ngit-http-backend. This can make it hard to debug the server\nside of an http session. Let's let it through.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/89c57ab3f0168b192d5ccc159972fdb26e0ba80b"
                },
                {
                    "sha": "9a308de37c485068d6470d4c51e231a36e651e98",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t5541: move run_with_cmdline_limit to test-lib.sh\n\nWe use this to test http pushing with a restricted\ncommandline. Other scripts (like t5551, which does http\nfetching) will want to use it, too.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/9a308de37c485068d6470d4c51e231a36e651e98"
                },
                {
                    "sha": "376e4b39d4453ce50cbacc9c46a3bbdaad2134b2",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t5551: make EXPENSIVE test cheaper\n\nWe create 50,000 tags to check that we don't overflow the\ncommand-line of fetch-pack. But by using run_with_cmdline_limit,\nwe can get the same effect with a much smaller number of\ntags. This makes the test fast enough that we can drop the\nEXPENSIVE prereq, which means people will actually run it.\n\nIt was not documented to do so, but this test was also the\nonly test of a clone-over-http that requires multiple POSTs\nduring the conversation. We can continue to test that by\ndropping http.postbuffer to its minimum size, and checking\nthat we get two POSTs.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/376e4b39d4453ce50cbacc9c46a3bbdaad2134b2"
                },
                {
                    "sha": "f7711b353572616e7d2fdff7a3cc5f757d314eb8",
                    "author": {
                        "email": "adrien+dev@schischi.me",
                        "name": "Adrien Schildknecht"
                    },
                    "message": "userdiff: funcname and word patterns for sh\n\nAdd regexp based on the \"Shell Command Language\" specifications.\nBecause of the lax syntax of sh, some corner cases may not be\nhandled properly.\n\nSigned-off-by: Adrien Schildknecht <adrien+dev@schischi.me>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/f7711b353572616e7d2fdff7a3cc5f757d314eb8"
                },
                {
                    "sha": "da0005b8853137c91e44867d899910d5c7eb4425",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "*config.txt: stick to camelCase naming convention\n\nThis should improve readability. Compare \"thislongname\" and\n\"thisLongName\". The following keys are left in unchanged. We can\ndecide what to do with them later.\n\n - am.keepcr\n - core.autocrlf .safecrlf .trustctime\n - diff.dirstat .noprefix\n - gitcvs.usecrlfattr\n - gui.blamehistoryctx .trustmtime\n - pull.twohead\n - receive.autogc\n - sendemail.signedoffbycc .smtpsslcertpath .suppresscc\n\nHelped-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/da0005b8853137c91e44867d899910d5c7eb4425"
                },
                {
                    "sha": "34aedc3baa8fa214b64ce04227ff8e0c4ddf0c78",
                    "author": {
                        "email": "codemister99@yahoo.com",
                        "name": "Cody A Taylor"
                    },
                    "message": "git prompt: use toplevel to find untracked files\n\nThe __git_ps1() prompt function would not show an untracked\nstate when the current working directory was not a parent of\nthe untracked file.\n\nSigned-off-by: Cody A Taylor <codemister99@yahoo.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/34aedc3baa8fa214b64ce04227ff8e0c4ddf0c78"
                },
                {
                    "sha": "5f7817c85d4b5f65626c8f49249a6c91292b8513",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "define a structure for object IDs\n\nMany places throughout the code use \"unsigned char [20]\" to store object IDs\n(SHA-1 values).  This leads to lots of hardcoded numbers throughout the\ncodebase.  It also leads to confusion about the purposes of a buffer.\n\nIntroduce a structure for object IDs.  This allows us to obtain the benefits\nof compile-time checking for misuse.  The structure is expected to remain\nthe same size and have the same alignment requirements on all known\nplatforms, compared to the array of unsigned char, although this is not\nrequired for correctness.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/5f7817c85d4b5f65626c8f49249a6c91292b8513"
                },
                {
                    "sha": "aa1c6fdf478c023180e5ca5f1658b00a72592dc6",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "define utility functions for object IDs\n\nThere are several utility functions (hashcmp and friends) that are used\nfor comparing object IDs (SHA-1 values).  Using these functions, which\ntake pointers to unsigned char, with struct object_id requires tiresome\naccess to the sha1 member, which bloats code and violates the desired\nencapsulation.  Provide wrappers around these functions for struct\nobject_id for neater, more maintainable code.  Use the new constants to\navoid the hard-coded 20s and 40s throughout the original functions.\n\nThese functions simply call the underlying pointer-to-unsigned-char\nversions to ensure that any performance improvements will be passed\nthrough to the new functions.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/aa1c6fdf478c023180e5ca5f1658b00a72592dc6"
                },
                {
                    "sha": "3c5ff9956c017e1737fdc350dbec160277be4fc1",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "bisect.c: convert leaf functions to use struct object_id\n\nConvert some constants to GIT_SHA1_HEXSZ.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/3c5ff9956c017e1737fdc350dbec160277be4fc1"
                },
                {
                    "sha": "13609673c4410df754197ec4ae9b57f15bc803d4",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "archive.c: convert to use struct object_id\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/13609673c4410df754197ec4ae9b57f15bc803d4"
                },
                {
                    "sha": "aeecdcd4c1c1a380e45aecadd8042a6a90ee3a20",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "zip: use GIT_SHA1_HEXSZ for trailers\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/aeecdcd4c1c1a380e45aecadd8042a6a90ee3a20"
                },
                {
                    "sha": "fa33c3aae238c683b2b15989b9d7f88df19fa93d",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "bulk-checkin.c: convert to use struct object_id\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/fa33c3aae238c683b2b15989b9d7f88df19fa93d"
                },
                {
                    "sha": "1ff57c13c54bc9d548178e012f77717f87f2655d",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "diff: convert struct combine_diff_path to object_id\n\nAlso, convert a constant to GIT_SHA1_HEXSZ.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/1ff57c13c54bc9d548178e012f77717f87f2655d"
                },
                {
                    "sha": "7683e2e6e301835236539a33b2fba936dd1a0a2b",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "commit: convert parts to struct object_id\n\nConvert struct commit_graft and necessary local parts of commit.c.\nAlso, convert several constants based on the hex length of an SHA-1 to\nuse GIT_SHA1_HEXSZ, and move several magic constants into variables for\nreadability.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/7683e2e6e301835236539a33b2fba936dd1a0a2b"
                },
                {
                    "sha": "1a876a69af6552d16827ecc1931c42e2287a83a0",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "patch-id: convert to use struct object_id\n\nConvert some magic numbers to the new GIT_SHA1 constants.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/1a876a69af6552d16827ecc1931c42e2287a83a0"
                },
                {
                    "sha": "d07d4ab401173a10173f2747cf5e0f074b6d2b39",
                    "author": {
                        "email": "sandals@crustytoothpaste.net",
                        "name": "brian m. carlson"
                    },
                    "message": "apply: convert threeway_stage to object_id\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": true,
                    "url": "https://api.github.com/repos/git/git/commits/d07d4ab401173a10173f2747cf5e0f074b6d2b39"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:08:10Z",
        "org": {
            "id": 18133,
            "login": "git",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/git",
            "avatar_url": "https://avatars.githubusercontent.com/u/18133?"
        }
    },
    {
        "id": "2648761161",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 36502,
            "name": "git/git",
            "url": "https://api.github.com/repos/git/git"
        },
        "payload": {
            "push_id": 601859377,
            "size": 38,
            "distinct_size": 0,
            "ref": "refs/heads/maint",
            "head": "bb8577532add843833ebf8b5324f94f84cb71ca0",
            "before": "1165ae6f3d42e0eb0ddfc2d4e6dfa8bd0b88eb60",
            "commits": [
                {
                    "sha": "c536c0755f6450b7bcce499cfda171f8c6d1e593",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "apply: reject input that touches outside the working area\n\nBy default, a patch that affects outside the working area (either a\nGit controlled working tree, or the current working directory when\n\"git apply\" is used as a replacement of GNU patch) is rejected as a\nmistake (or a mischief).  Git itself does not create such a patch,\nunless the user bends over backwards and specifies a non-standard\nprefix to \"git diff\" and friends.\n\nWhen `git apply` is used as a \"better GNU patch\", the user can pass\nthe `--unsafe-paths` option to override this safety check. This\noption has no effect when `--index` or `--cached` is in use.\n\nThe new test was stolen from Jeff King with slight enhancements.\nNote that a few new tests for touching outside the working area by\nfollowing a symbolic link are still expected to fail at this step,\nbut will be fixed in later steps.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/c536c0755f6450b7bcce499cfda171f8c6d1e593"
                },
                {
                    "sha": "3c37a2e339e695c7cc41048fe0921cbc8b48b0f0",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "apply: do not read from the filesystem under --index\n\nWe currently read the preimage to apply a patch from the index only\nwhen the --cached option is given.  Do so also when the command is\nrunning under the --index option.  With --index, the index entry and\nthe working tree file for a path that is involved in a patch must be\nidentical, so this should not affect the result, but by reading from\nthe index, we will get the protection to avoid reading an unintended\npath beyond a symbolic link automatically.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/3c37a2e339e695c7cc41048fe0921cbc8b48b0f0"
                },
                {
                    "sha": "fdc2c3a926c21e24986677abd02c8bc568a5de32",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "apply: do not read from beyond a symbolic link\n\nWe should reject a patch, whether it renames/copies dir/file to\nelsewhere with or without modificiation, or updates dir/file in\nplace, if \"dir/\" part is actually a symbolic link to elsewhere,\nby making sure that the code to read the preimage does not read\nfrom a path that is beyond a symbolic link.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/fdc2c3a926c21e24986677abd02c8bc568a5de32"
                },
                {
                    "sha": "e0d201b61601e17e24ed00cc3d16e8e25ca68596",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "apply: do not touch a file beyond a symbolic link\n\nBecause Git tracks symbolic links as symbolic links, a path that\nhas a symbolic link in its leading part (e.g. path/to/dir/file,\nwhere path/to/dir is a symbolic link to somewhere else, be it\ninside or outside the working tree) can never appear in a patch\nthat validly applies, unless the same patch first removes the\nsymbolic link to allow a directory to be created there.\n\nDetect and reject such a patch.\n\nThings to note:\n\n - Unfortunately, we cannot reuse the has_symlink_leading_path()\n   from dir.c, as that is only about the working tree, but \"git\n   apply\" can be told to apply the patch only to the index or to\n   both the index and to the working tree.\n\n - We cannot directly use has_symlink_leading_path() even when we\n   are applying only to the working tree, as an early patch of a\n   valid input may remove a symbolic link path/to/dir and then a\n   later patch of the input may create a path path/to/dir/file, but\n   \"git apply\" first checks the input without touching either the\n   index or the working tree.  The leading symbolic link check must\n   be done on the interim result we compute in-core (i.e. after the\n   first patch, there is no path/to/dir symbolic link and it is\n   perfectly valid to create path/to/dir/file).\n\n   Similarly, when an input creates a symbolic link path/to/dir and\n   then creates a file path/to/dir/file, we need to flag it as an\n   error without actually creating path/to/dir symbolic link in the\n   filesystem.\n\nInstead, for any patch in the input that leaves a path (i.e. a non\ndeletion) in the result, we check all leading paths against the\nresulting tree that the patch would create by inspecting all the\npatches in the input and then the target of patch application\n(either the index or the working tree).\n\nThis way, we catch a mischief or a mistake to add a symbolic link\npath/to/dir and a file path/to/dir/file at the same time, while\nallowing a valid patch that removes a symbolic link path/to/dir and\nthen adds a file path/to/dir/file.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/e0d201b61601e17e24ed00cc3d16e8e25ca68596"
                },
                {
                    "sha": "f2b4f0a23b400f5760deb9251296d79eba83ab78",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t4008: correct stale comments\n\nA complete rewrite of a single file was originally designed to be\nexpressed as a deletion immediately followed by a creation of the\nsame file, and the comments in the test updated here were written to\nreflect that design decision made in f345b0a0 (Add -B flag to diff-*\nbrothers., 2005-05-30).  However, we later realized that a complete\nrewrite is merely how a textual diff should be represented at\n366175ef (Rework -B output., 2005-06-19), and updated the actual\ntests.  But we forgot to update the introductory text while doing\nso.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/f2b4f0a23b400f5760deb9251296d79eba83ab78"
                },
                {
                    "sha": "2c0ab4d49d294aa9127ce5616d2d6c4d12be8e74",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t9300: correct expected object names\n\nThe output the test #36 expects is bogus.  There are no blob objects\nwhose names are 36a590... or 046d037... when this test was run.\n\nIt was left unnoticed only because compare_diff_raw, which only\ncares about the add/delete/rename/copy was used to check the result.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/2c0ab4d49d294aa9127ce5616d2d6c4d12be8e74"
                },
                {
                    "sha": "bb8db1b5538a455a0892312b25d73d51f2650429",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t4010: correct expected object names\n\nThe output the test expects is bogus.\n\nIt was left unnoticed only because compare_diff_raw, which only\ncares about the add/delete/rename/copy was used to check the result.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/bb8db1b5538a455a0892312b25d73d51f2650429"
                },
                {
                    "sha": "459b8d22e544b3876a2270ee7290c289a39ebbb2",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "tests: do not borrow from COPYING and README from the real source\n\nThese two files have been modified since the tests started using\nas test input, making the exact object names they expect to be\ndifferent from what actually happens in the trash repository they\nuse to run tests.\n\nInstead, take a snapshot of these two files and keep them in\nt/diff-lib/ so that we can update the real ones without having to\nworry about breaking tests.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/459b8d22e544b3876a2270ee7290c289a39ebbb2"
                },
                {
                    "sha": "bd9150b7e5f34d7148b02ca2eed96270c7744049",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t/diff-lib: check exact object names in compare_diff_raw\n\nThe \"sanitize\" helper wanted to strip the similarity and\ndissimilarity scores when making comparison, but it was\nstripping away the object names as well.\n\nWhile we do not want to require the exact object names the tests\nexpect to be maintained, as it would be seen as an extra burden,\nthis would have prevented us catching a silly bug such as showing\nnon 0{40} object name on the preimage side of an addition or on the\npostimage side of a deletion, because all [0-9a-f]{40} strings were\nconsidered equally OK.\n\nIn the longer term, when a test only wants to see the status of the\nchange without having to worry about object names, it should be\nrewritten not to inspect the raw format.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/bd9150b7e5f34d7148b02ca2eed96270c7744049"
                },
                {
                    "sha": "db7b9e3ad39a4135072a1fd619b76d1c1093b501",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "t4008: modernise style\n\nUpdate this ancient test script to a more modern style in which the\nexpected result is prepared inside the body of the test that uses\nit.  Also, instead of using $tree, a shell variable, throughout the\ntest script, create a tag that points at it, to make it easier to\nmanually debug the test script in its trash directory.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/db7b9e3ad39a4135072a1fd619b76d1c1093b501"
                },
                {
                    "sha": "94bc83c5930c8c73fb0106b629123e2413b371af",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "git_connect: let user override virtual-host we send to daemon\n\nWhen we connect to a git-daemon at a given host and port, we\nactually send the string \"localhost:9418\" to the other side,\nwhich allows it to do virtual-hosting lookups. For testing\nand debugging, we'd like to be able to send arbitrary\nstrings, rather than the hostname we actually connected to.\n\nUsing \"insteadOf\" config does not work for this purpose, as\nthe hostname determination happens at a very low level,\nright before we feed the hostname to our lookup routines.\nYou could use /etc/hosts or similar to get around this, but\nwe cannot do that portably from our test suite.\n\nInstead, this patch provides an environment variable that\ncan be used to send an arbitrary string.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/94bc83c5930c8c73fb0106b629123e2413b371af"
                },
                {
                    "sha": "5248f2dd4fe763ef9d1267f50481deee36ee57c1",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "t5570: test git-daemon's --interpolated-path option\n\nWe did not test this at all; let's just give a basic sanity\ncheck that we can find a path based on virtual hosting, and\nthat the downcase canonicalization works.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/5248f2dd4fe763ef9d1267f50481deee36ee57c1"
                },
                {
                    "sha": "b48537305229d1a4f25633f71941ee52d2582017",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "daemon: sanitize incoming virtual hostname\n\nWe use the daemon_avoid_alias function to make sure that the\npathname the user gives us is sane. However, after applying\nthat check, we might then interpolate the path using a\nstring given by the server admin, but which may contain more\nuntrusted data from the client. We should be sure to\nsanitize this data, as well.\n\nWe cannot use daemon_avoid_alias here, as it is more strict\nthan we need in requiring a leading '/'. At the same time,\nwe can be much more strict here. We are interpreting a\nhostname, which should not contain slashes or excessive runs\nof dots, as those things are not allowed in DNS names.\n\nNote that in addition to cleansing the hostname field, we\nmust check the \"canonical hostname\" (%CH) as well as the\nport (%P), which we take as a raw string.  For the canonical\nhostname, this comes from an actual DNS lookup on the\naccessed IP, which makes it a much less likely vector for\nproblems. But it does not hurt to sanitize it in the same\nway. Unfortunately we cannot test this case easily, as it\nwould involve a custom hostname lookup.\n\nWe do not need to check %IP, as it comes straight from\ninet_ntop, so must have a sane form.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/b48537305229d1a4f25633f71941ee52d2582017"
                },
                {
                    "sha": "edef953e482ce212b7d68bbe0f59e34b5552db3e",
                    "author": {
                        "email": "l.s.r@web.de",
                        "name": "René Scharfe"
                    },
                    "message": "daemon: look up client-supplied hostname lazily\n\nLook up canonical hostname and IP address using getaddrinfo(3) or\ngethostbyname(3) only if --interpolated-path or --access-hook were\nspecified.\n\nDo that by introducing getter functions for canon_hostname and\nip_address and using them for all read accesses.  These wrappers call\nthe new helper lookup_hostname(), which sets the variables only at its\nfirst call.\n\nSigned-off-by: Rene Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/edef953e482ce212b7d68bbe0f59e34b5552db3e"
                },
                {
                    "sha": "dc8edc8f7d503b96dc4ceb275f7f6ca7637be5a9",
                    "author": {
                        "email": "l.s.r@web.de",
                        "name": "René Scharfe"
                    },
                    "message": "daemon: use callback to build interpolated path\n\nProvide a callback function for strbuf_expand() instead of using the\nhelper strbuf_expand_dict_cb().  While the resulting code is longer, it\nonly looks up the canonical hostname and IP address if at least one of\nthe placeholders %CH and %IP are used with --interpolated-path.\n\nUse a struct for passing the directory to the callback function instead\nof passing it directly to avoid having to cast away its const qualifier.\n\nSigned-off-by: Rene Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/dc8edc8f7d503b96dc4ceb275f7f6ca7637be5a9"
                },
                {
                    "sha": "817d03e10552c03fce7483df5034d72f883b2fab",
                    "author": {
                        "email": "j6t@kdbg.org",
                        "name": "Johannes Sixt"
                    },
                    "message": "test_ln_s_add: refresh stat info of fake symbolic links\n\nWe have a helper function test_ln_s_add that inserts a symbolic link\ninto the index even if the file system does not support symbolic links.\nThere is a small flaw in the emulation path: the added entry does not\npick up stat information of the fake symbolic link from the file system,\nas a consequence, the index is not exactly the same as for the \"regular\"\npath (where symbolic links are available). To fix this, just call\ngit update-index again.\n\nThis flaw was revealed by the earlier change that tightened\ncompare_diff_raw(), because a test case in t4008 depends on the\ncorrectly updated index.\n\nSigned-off-by: Johannes Sixt <j6t@kdbg.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/817d03e10552c03fce7483df5034d72f883b2fab"
                },
                {
                    "sha": "bcd57cb9e1583fe5174112422caba0397f7ae5f6",
                    "author": {
                        "email": "mikko.rapeli@iki.fi",
                        "name": "Mikko Rapeli"
                    },
                    "message": "Documentation/git-clean.txt: document that -f may need to be given twice\n\nThis is needed in build automation where the tree really needs to\nbe reset to known state.\n\nSigned-off-by: Mikko Rapeli <mikko.rapeli@iki.fi>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/bcd57cb9e1583fe5174112422caba0397f7ae5f6"
                },
                {
                    "sha": "77fdb8a82cc624bb3c720b87725abae4d0df5073",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "grep: correct help string for --exclude-standard\n\nThe current help string is about --no-exclude-standard. But \"git grep -h\"\nwould show --exclude-standard instead. Flip the string. See 0a93fb8\n(grep: teach --untracked and --exclude-standard options - 2011-09-27)\nfor more info about these options.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/77fdb8a82cc624bb3c720b87725abae4d0df5073"
                },
                {
                    "sha": "f98c2f7e53062a59f67914337c0b45c82393e11f",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "diffcore-rename: split locate_rename_dst into two functions\n\nThis function manages the mapping of destination pathnames\nto filepairs, and it handles both insertion and lookup. This\nmakes the return value a bit confusing, as we return a newly\ncreated entry (even though no caller cares), and have no\nroom to indicate to the caller that an entry already\nexisted.\n\nInstead, let's break this up into two distinct functions,\nboth backed by a common binary search. The binary search\nwill use our normal \"return the index if we found something,\nor negative index minus one to show where it would have\ngone\" semantics.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/f98c2f7e53062a59f67914337c0b45c82393e11f"
                },
                {
                    "sha": "4d6be03b95c3db21db1bb8fee01128c1b13f70e7",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "diffcore-rename: avoid processing duplicate destinations\n\nThe rename code cannot handle an input where we have\nduplicate destinations (i.e., more than one diff_filepair in\nthe queue with the same string in its pair->two->path). We\nend up allocating only one slot in the rename_dst mapping.\nIf we fill in the diff_filepair for that slot, when we\nre-queue the results, we may queue that filepair multiple\ntimes. When the diff is finally flushed, the filepair is\nprocessed and free()d multiple times, leading to heap\ncorruption.\n\nThis situation should only happen when a tree diff sees\nduplicates in one of the trees (see the added test for a\ndetailed example). Rather than handle it, the sanest thing\nis just to turn off rename detection altogether for the\ndiff.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/4d6be03b95c3db21db1bb8fee01128c1b13f70e7"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:08:07Z",
        "org": {
            "id": 18133,
            "login": "git",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/git",
            "avatar_url": "https://avatars.githubusercontent.com/u/18133?"
        }
    },
    {
        "id": "2648761101",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 36502,
            "name": "git/git",
            "url": "https://api.github.com/repos/git/git"
        },
        "payload": {
            "push_id": 601859351,
            "size": 45,
            "distinct_size": 9,
            "ref": "refs/heads/next",
            "head": "dac11456999723012aeb1167e3d09a83b1e0f740",
            "before": "e53910a3a87faf247e84e9c3dc849210d293759c",
            "commits": [
                {
                    "sha": "05c3e5c7719a4b25237d00a696877bdd47488678",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: avoid unnecessary negation\n\nSection names and variable names are both case-insensitive, but one\nis described as \"not case sensitive\".  Use \"case-insensitive\" for\nboth.\n\nInstead of saying \"... have to be escaped\" without telling what that\nescaping achieves, state it in a more positive way, i.e. \"... can be\nincluded by escaping\".\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/05c3e5c7719a4b25237d00a696877bdd47488678"
                },
                {
                    "sha": "a5285b6c231b55e71007d89a4a29b151302abe09",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: explain multi-valued variables once\n\nThe syntax section repeats what the preamble explained already.\nThat a variable can have multiple values is more about what a\nvariable is than the syntax of the file.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/a5285b6c231b55e71007d89a4a29b151302abe09"
                },
                {
                    "sha": "ff5507ed2a34f0eb8c8d4f0bd300d2b786031aff",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: describe the structure first and then meaning\n\nA line can be continued via a backquote-LF and can be chomped at a\ncomment character.  But that is not specific to string-typed values.\nIt is common to all, just like unquoted leading and trailing\nwhitespaces are stripped and inter-word spacing are retained.\n\nMove the description around and desribe these structural rules\nfirst, then introduce the double-quote facility as a way to override\nthem, and finally mention various types of values.\n\nNote that these structural rules only apply to the value part of the\nconfiguration file.  E.g.\n\n    [aSection] \\\n        name \\\n\t= value\n\ndoes not work, because the rules kick in only after seeing \"name =\".\nBoth the original and the updated text are phrased in an awkward way\nby singling out the \"value\" part of the line because of this.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/ff5507ed2a34f0eb8c8d4f0bd300d2b786031aff"
                },
                {
                    "sha": "5f7b91baca0693e80fa9230a2008107aa4779743",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: have a separate \"Values\" section\n\nThe various types of values set to the configuration variables\ndeserve more than a brief footnote mention in the syntax section,\nand it will be more so after the later steps of this clean up\neffort.\n\nMove the mention of booleans from the syntax section to this new\nsection, and describe how human-readble integers can be spelled with\nscaling there.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/5f7b91baca0693e80fa9230a2008107aa4779743"
                },
                {
                    "sha": "b92c1a28f832ede499a4f7e167d46cd5b2192fe4",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: describe 'color' value type in the \"Values\" section\n\nInstead of describing it for color.branch.<slot> and have everybody\nelse refer to it, explain how colors are spelled in \"Values\" section\nupfront.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/b92c1a28f832ede499a4f7e167d46cd5b2192fe4"
                },
                {
                    "sha": "1c448b3b5c283d793d994808d0ec1174b9b4dc26",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Documentation/config.txt: simplify boolean description in the syntax section\n\nThe 'true' short-hand doesn't deserve a separate sentence; even our own\n\n    git config --bool foo.bar yes\n\nwould not produce it.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/1c448b3b5c283d793d994808d0ec1174b9b4dc26"
                },
                {
                    "sha": "5ee875852e3cb41c21c2e89a636fc1e40c4012b1",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "log --decorate: do not leak \"commit\" color into the next item\n\nIn \"git log --decorate\", you would see the commit header like this:\n\n    commit ... (HEAD, jc/decorate-leaky-separator-color)\n\nwhere \"commit ... (\" is painted in color.diff.commit, \"HEAD\" in\ncolor.decorate.head, \", \" in color.diff.commit, the branch name in\ncolor.decorate.branch and then closing \")\" in color.diff.commit.\n\nIf you wanted to paint the HEAD and local branch name in the same\ncolor as the body text (perhaps because cyan and green are too faint\non a black-on-white terminal to be readable), you would not want to\nhave to say\n\n    [color \"decorate\"]\n        head = black\n        branch = black\n\nbecause that you would not be able to reuse same configuration on a\nwhite-on-black terminal.  You would naively expect\n\n    [color \"decorate\"]\n        head = normal\n\tbranch = normal\n\nto work, but unfortunately it does not.  It paints the string \"HEAD\"\nand the branch name in the same color as the opening parenthesis or\ncomma between the decoration elements.  This is because the code\nforgets to reset the color after printing the \"prefix\" in its own\ncolor.\n\nIt theoretically is possible that some people were expecting and\nrelying on that the attribute set as the \"diff.commit\" color, which\nis used to draw these opening parenthesis and inter-item comma, is\ninherited by the drawing of branch names, but it is not how the\ncoloring works everywhere else.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/5ee875852e3cb41c21c2e89a636fc1e40c4012b1"
                },
                {
                    "sha": "130e475e1f8aa72e48dde43159a28232ff31fee6",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "git-instaweb: allow running in a working tree subdirectory\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/130e475e1f8aa72e48dde43159a28232ff31fee6"
                },
                {
                    "sha": "ff7a9dc2c503360190650d604dbdbc293d99b765",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "git-instaweb: use @SHELL_PATH@ instead of /bin/sh\n\nIf the user has configured a value for SHELL_PATH then\nbe sure to use it for any generated scripts instead of\nhard-coding /bin/sh.\n\nThe first line of the script is handled specially, but\nthe embedded #!/bin/sh line in the here document will\nnot be automatically updated unless it uses @SHELL_PATH@.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/ff7a9dc2c503360190650d604dbdbc293d99b765"
                },
                {
                    "sha": "1b56cdf901f6e6a73d0edadf56afb1c878c7622a",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "git-compat-util.h: move SHELL_PATH default into header\n\nIf SHELL_PATH is not defined we use \"/bin/sh\".  However,\nrun-command.c is not the only file that needs to use\nthe default value so move it into a common header.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/1b56cdf901f6e6a73d0edadf56afb1c878c7622a"
                },
                {
                    "sha": "b680a86a86f44444643b9be5bf4822feda128cd0",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "help.c: use SHELL_PATH instead of hard-coded \"/bin/sh\"\n\nIf the user has set SHELL_PATH in the Makefile then we\nshould respect that value and use it.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/b680a86a86f44444643b9be5bf4822feda128cd0"
                },
                {
                    "sha": "9529080de253b89474402f323e10470656764b3a",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "configure: support HAVE_BSD_SYSCTL option\n\nOn BSD-compatible systems some information such as the number\nof available CPUs may only be available via the sysctl function.\n\nAdd support for a HAVE_BSD_SYSCTL option complete with autoconf\nsupport and include the sys/syctl.h header when the option is\nenabled to make the sysctl function available.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/9529080de253b89474402f323e10470656764b3a"
                },
                {
                    "sha": "a25b5a32c76630f2433b860fef7bc28a9380a8f6",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "thread-utils.c: detect CPU count on older BSD-like systems\n\nNot all systems support using sysconf to detect the number\nof available CPU cores.  Older BSD and BSD-derived systems\nonly provide the information via the sysctl function.\n\nIf HAVE_BSD_SYSCTL is defined attempt to retrieve the number\nof available CPU cores using the sysctl function.\n\nIf HAVE_BSD_SYSCTL is not defined or the sysctl function\nfails, we still attempt to get the information via sysconf.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/a25b5a32c76630f2433b860fef7bc28a9380a8f6"
                },
                {
                    "sha": "4ab682e213d292fb921d21d25208a74ce47e2c19",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "Merge branch 'jc/decorate-leaky-separator-color' into HEAD\n\n* jc/decorate-leaky-separator-color:\n  log --decorate: do not leak \"commit\" color into the next item\n  Documentation/config.txt: simplify boolean description in the syntax section\n  Documentation/config.txt: describe 'color' value type in the \"Values\" section\n  Documentation/config.txt: have a separate \"Values\" section\n  Documentation/config.txt: describe the structure first and then meaning\n  Documentation/config.txt: explain multi-valued variables once\n  Documentation/config.txt: avoid unnecessary negation",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/4ab682e213d292fb921d21d25208a74ce47e2c19"
                },
                {
                    "sha": "51ff0f27bc6bfe83da7304ef9db77f3a2a4a47b0",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "log: decorate HEAD with branch name\n\nCurrently, log decorations do not indicate which branch is checked out\nand whether HEAD is detached.\n\nWhen branch foo is checked out, change the \"HEAD, foo\" part of the\ndecorations to \"HEAD -> foo\". This serves to indicate both ref\ndecorations (helped by the spacing) as well as their relationshsip.\nAs a consequence, \"HEAD\" without any \" -> \" denotes a detached HEAD now.\n\nSigned-off-by: Michael J Gruber <git@drmicha.warpmail.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/51ff0f27bc6bfe83da7304ef9db77f3a2a4a47b0"
                },
                {
                    "sha": "dcd01ea187fc9a936b4083a85343989840afd7bd",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "imap-send: use cURL automatically when NO_OPENSSL defined\n\nIf both USE_CURL_FOR_IMAP_SEND and NO_OPENSSL are defined do\nnot force the user to add --curl to get a working git imap-send\ncommand.\n\nInstead automatically select --curl and warn and ignore the\n--no-curl option.  And while we're in there, correct the\nwarning message when --curl is requested but not supported.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/dcd01ea187fc9a936b4083a85343989840afd7bd"
                },
                {
                    "sha": "ce026cc7e2ff729c9809fef860cd696d1f7bb06c",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "t5528: do not fail with FreeBSD shell\n\nThe FreeBSD shell converts this expression:\n\n  git ${1:+-c push.default=\"$1\"} push\n\nto this when \"$1\" is not empty:\n\n  git \"-c push.default=$1\" push\n\nwhich causes git to fail.  To avoid this we simply break up the\nexpansion into two parts so that the whitespace which creates\ntwo arguments instead of one is outside the ${...} like so:\n\n  git ${1:+-c} ${1:+push.default=\"$1\"} push\n\nThis has the desired effect on all platforms allowing the test\nto pass on FreeBSD.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/ce026cc7e2ff729c9809fef860cd696d1f7bb06c"
                },
                {
                    "sha": "3f88c1b524b47560a8ef520d7d702c95261d0a97",
                    "author": {
                        "email": "mackyle@gmail.com",
                        "name": "Kyle J. McKay"
                    },
                    "message": "t7510: do not fail when gpg warns about insecure memory\n\nDepending on how gpg was built, it may issue the following\nmessage to stderr when run:\n\n  Warning: using insecure memory!\n\nWhen the test is collecting gpg output it is therefore not\nenough to just match on a \"gpg: \" prefix it must also match\non a \"Warning: \" prefix wherever it needs to match lines\nthat have been produced by gpg.\n\nSigned-off-by: Kyle J. McKay <mackyle@gmail.com>\nAcked-by: Michael J Gruber <git@drmicha.warpmail.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/3f88c1b524b47560a8ef520d7d702c95261d0a97"
                },
                {
                    "sha": "04f20c04c6e51ee061a44406b9a73bf54683d8eb",
                    "author": {
                        "email": "sbeller@google.com",
                        "name": "Stefan Beller"
                    },
                    "message": "connect.c: do not leak \"conn\" after showing diagnosis\n\nWhen git_connect() is called to see how the URL is parsed for\ndebugging purposes with CONNECT_DIAG_URL set, the variable conn is\nleaked.  At this point in the codeflow, it only has its memory and\nno other resource is associated with it, so it is sufficient to\nclean it up by just freeing it.\n\nSigned-off-by: Stefan Beller <sbeller@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/04f20c04c6e51ee061a44406b9a73bf54683d8eb"
                },
                {
                    "sha": "6f75d45b2412c646b74300f360361b319689e554",
                    "author": {
                        "email": "l.s.r@web.de",
                        "name": "René Scharfe"
                    },
                    "message": "use isxdigit() for checking if a character is a hexadecimal digit\n\nUse the standard function isxdigit() to make the intent clearer and\navoid using magic constants.\n\nSigned-off-by: Rene Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/git/git/commits/6f75d45b2412c646b74300f360361b319689e554"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-14T07:08:01Z",
        "org": {
            "id": 18133,
            "login": "git",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/git",
            "avatar_url": "https://avatars.githubusercontent.com/u/18133?"
        }
    },
    {
        "id": "2645422354",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 600478624,
            "size": 61,
            "distinct_size": 17,
            "ref": "refs/heads/pu",
            "head": "474f2d10de3111cb8b25f05c37c7f0518b70a818",
            "before": "782422c188c328b4cb6091dc6b1d979351eeb180",
            "commits": [
                {
                    "sha": "dd059c6c07ede0486da5f9d02619687ae3108773",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "tag: fix some mis-organized options in \"-h\" listing\n\nRunning \"git tag -h\" currently prints:\n\n  [...]\n  Tag creation options\n      [...]\n      --column[=<style>]    show tag list in columns\n      --sort <type>         sort tags\n\n  Tag listing options\n      --contains <commit>   print only tags that contain the commit\n      --points-at <object>  print only tags of the object\n\nThe \"--column\" and \"--sort\" options should go under the \"Tag listing\" group.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/dd059c6c07ede0486da5f9d02619687ae3108773"
                },
                {
                    "sha": "55fe6f51f41f254d3d87994d18bff04664aa013b",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "dir.c: optionally compute sha-1 of a .gitignore file\n\nThis is not used anywhere yet. But the goal is to compare quickly if a\n.gitignore file has changed when we have the SHA-1 of both old (cached\nsomewhere) and new (from index or a tree) versions.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nHelped-by: Torsten Bögershausen <tboegi@web.de>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/55fe6f51f41f254d3d87994d18bff04664aa013b"
                },
                {
                    "sha": "0dcb8d7fe0ec2687d4a6ae201ae72907d862437c",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: record .gitignore information and dir hierarchy\n\nThe idea is if we can capture all input and (non-rescursive) output of\nread_directory_recursive(), and can verify later that all the input is\nthe same, then the second r_d_r() should produce the same output as in\nthe first run.\n\nThe requirement for this to work is stat info of a directory MUST\nchange if an entry is added to or removed from that directory (and\nshould not change often otherwise). If your OS and filesystem do not\nmeet this requirement, untracked cache is not for you. Most file\nsystems on *nix should be fine. On Windows, NTFS is fine while FAT may\nnot be [1] even though FAT on Linux seems to be fine.\n\nThe list of input of r_d_r() is in the big comment block in dir.h. In\nshort, the output of a directory (not counting subdirs) mainly depends\non stat info of the directory in question, all .gitignore leading to\nit and the check_only flag when r_d_r() is called recursively. This\npatch records all this info (and the output) as r_d_r() runs.\n\nTwo hash_sha1_file() are required for $GIT_DIR/info/exclude and\ncore.excludesfile unless their stat data matches. hash_sha1_file() is\nonly needed when .gitignore files in the worktree are modified,\notherwise their SHA-1 in index is used (see the previous patch).\n\nWe could store stat data for .gitignore files so we don't have to\nrehash them if their content is different from index, but I think\n.gitignore files are rarely modified, so not worth extra cache data\n(and hashing penalty read-cache.c:verify_hdr(), as we will be storing\nthis as an index extension).\n\nThe implication is, if you change .gitignore, you better add it to the\nindex soon or you lose all the benefit of untracked cache because a\nmodified .gitignore invalidates all subdirs recursively. This is\nespecially bad for .gitignore at root.\n\nThis cached output is about untracked files only, not ignored files\nbecause the number of tracked files is usually small, so small cache\noverhead, while the number of ignored files could go really high\n(e.g. *.o files mixing with source code).\n\n[1] \"Description of NTFS date and time stamps for files and folders\"\n    http://support.microsoft.com/kb/299648\n\nHelped-by: Torsten Bögershausen <tboegi@web.de>\nHelped-by: David Turner <dturner@twopensource.com>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/0dcb8d7fe0ec2687d4a6ae201ae72907d862437c"
                },
                {
                    "sha": "ccad261f07900b55029f3fd42a9ec8f17229808f",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: initial untracked cache validation\n\nMake sure the starting conditions and all global exclude files are\ngood to go. If not, either disable untracked cache completely, or wipe\nout the cache and start fresh.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/ccad261f07900b55029f3fd42a9ec8f17229808f"
                },
                {
                    "sha": "5ebf79ad4b308c678bd9623dd906c01bb0ab7e0f",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: invalidate dirs recursively if .gitignore changes\n\nIt's easy to see that if an existing .gitignore changes, its SHA-1\nwould be different and invalidate_gitignore() is called.\n\nIf .gitignore is removed, add_excludes() will treat it like an empty\n.gitignore, which again should invalidate the cached directory data.\n\nif .gitignore is added, lookup_untracked() already fills initial\n.gitignore SHA-1 as \"empty file\", so again invalidate_gitignore() is\ncalled.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5ebf79ad4b308c678bd9623dd906c01bb0ab7e0f"
                },
                {
                    "sha": "cf7c61484f77f6212b52c7e9fdce7bfbbb4eb854",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: make a wrapper around {open,read,close}dir()\n\nThis allows us to feed different info to read_directory_recursive()\nbased on untracked cache in the next patch.\n\nHelped-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/cf7c61484f77f6212b52c7e9fdce7bfbbb4eb854"
                },
                {
                    "sha": "91a2288b5f63fba82e912dca475154d5b9dd233a",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: record/validate dir mtime and reuse cached output\n\nThe main readdir loop in read_directory_recursive() is replaced with a\nnew one that checks if cached results of a directory is still valid.\n\nIf a file is added or removed from the index, the containing directory\nis invalidated (but not its subdirs). If directory's mtime is changed,\nthe same happens. If a .gitignore is updated, the containing directory\nand all subdirs are invalidated recursively. If dir_struct#flags or\nother conditions change, the cache is ignored.\n\nIf a directory is invalidated, we opendir/readdir/closedir and run the\nexclude machinery on that directory listing as usual. If untracked\ncache is also enabled, we'll update the cache along the way. If a\ndirectory is validated, we simply pull the untracked listing out from\nthe cache. The cache also records the list of direct subdirs that we\nhave to recurse in. Fully excluded directories are seen as \"untracked\nfiles\".\n\nIn the best case when no dirs are invalidated, read_directory()\nbecomes a series of\n\n  stat(dir), open(.gitignore), fstat(), read(), close() and optionally\n  hash_sha1_file()\n\nFor comparison, standard read_directory() is a sequence of\n\n  opendir(), readdir(), open(.gitignore), fstat(), read(), close(), the\n  expensive last_exclude_matching() and closedir().\n\nWe already try not to open(.gitignore) if we know it does not exist,\nso open/fstat/read/close sequence does not apply to every\ndirectory. The sequence could be reduced further, as noted in\nprep_exclude() in another patch. So in theory, the entire best-case\nread_directory sequence could be reduced to a series of stat() and\nnothing else.\n\nThis is not a silver bullet approach. When you compile a C file, for\nexample, the old .o file is removed and a new one with the same name\ncreated, effectively invalidating the containing directory's cache\n(but not its subdirectories). If your build process touches every\ndirectory, this cache adds extra overhead for nothing, so it's a good\nidea to separate generated files from tracked files.. Editors may use\nthe same strategy for saving files. And of course you're out of luck\nrunning your repo on an unsupported filesystem and/or operating system.\n\nHelped-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/91a2288b5f63fba82e912dca475154d5b9dd233a"
                },
                {
                    "sha": "26cb0182b8b2e119f469750b3511fac4624f6667",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: mark what dirs should be recursed/saved\n\nIf we redo this thing in a functional style, we would have one struct\nuntracked_dir as input tree and another as output. The input is used\nfor verification. The output is a brand new tree, reflecting current\nworktree.\n\nBut that means recreate a lot of dir nodes even if a lot could be\nshared between input and output trees in good cases. So we go with the\nmessy but efficient way, combining both input and output trees into\none. We need a way to know which node in this combined tree belongs to\nthe output. This is the purpose of this \"recurse\" flag.\n\n\"valid\" bit can't be used for this because it's about data of the node\nexcept the subdirs. When we invalidate a directory, we want to keep\ncached data of the subdirs intact even though we don't really know\nwhat subdir still exists (yet). Then we check worktree to see what\nactual subdir remains on disk. Those will have 'recurse' bit set\nagain. If cached data for those are still valid, we may be able to\navoid computing exclude files for them. Those subdirs that are deleted\nwill have 'recurse' remained clear and their 'valid' bits do not\nmatter.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/26cb0182b8b2e119f469750b3511fac4624f6667"
                },
                {
                    "sha": "27b099ae8742f014700edba92036db288750e44a",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: don't open non-existent .gitignore\n\nThis cuts down a signficant number of open(.gitignore) because most\ndirectories usually don't have .gitignore files.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/27b099ae8742f014700edba92036db288750e44a"
                },
                {
                    "sha": "be0d9d532326a81d761913e3ec9e2e7c62eeca7b",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "ewah: add convenient wrapper ewah_serialize_strbuf()\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/be0d9d532326a81d761913e3ec9e2e7c62eeca7b"
                },
                {
                    "sha": "83c094ad0dd2104adbbec034f802dceb1d052981",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: save to an index extension\n\nHelped-by: Stefan Beller <sbeller@google.com>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/83c094ad0dd2104adbbec034f802dceb1d052981"
                },
                {
                    "sha": "f9e6c649589e0940ccb82821107fb658277ed86b",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: load from UNTR index extension\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/f9e6c649589e0940ccb82821107fb658277ed86b"
                },
                {
                    "sha": "e931371a8f1164185486a1f5fdaaa708b4a6217c",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: invalidate at index addition or removal\n\nIdeally we should implement untracked_cache_remove_from_index() and\nuntracked_cache_add_to_index() so that they update untracked cache\nright away instead of invalidating it and wait for read_directory()\nnext time to deal with it. But that may need some more work in\nunpack-trees.c. So stay simple as the first step.\n\nThe new call in add_index_entry_with_check() may look strange because\nnew calls usually stay close to cache_tree_invalidate_path(). We do it\na bit later than c_t_i_p() in this function because if it's about\nreplacing the entry with the same name, we don't care (but cache-tree\ndoes).\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/e931371a8f1164185486a1f5fdaaa708b4a6217c"
                },
                {
                    "sha": "2bb4cda1987afe6911a1c193283213babda328d2",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "read-cache.c: split racy stat test to a separate function\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/2bb4cda1987afe6911a1c193283213babda328d2"
                },
                {
                    "sha": "ed4efab1b17e883b761b4482c40c04a4529be8f9",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: avoid racy timestamps\n\nWhen a directory is updated within the same second that its timestamp\nis last saved, we cannot realize the directory has been updated by\nchecking timestamps. Assume the worst (something is update). See\n29e4d36 (Racy GIT - 2005-12-20) for more information.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/ed4efab1b17e883b761b4482c40c04a4529be8f9"
                },
                {
                    "sha": "c9ccb5d327bd9259ca6cceb9d87df9eb2cba2e9d",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: print stats with $GIT_TRACE_UNTRACKED_STATS\n\nThis could be used to verify correct behavior in tests\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/c9ccb5d327bd9259ca6cceb9d87df9eb2cba2e9d"
                },
                {
                    "sha": "1bbb3dba3fbf733db45f073ddafe89f5972c516a",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: mark index dirty if untracked cache is updated\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/1bbb3dba3fbf733db45f073ddafe89f5972c516a"
                },
                {
                    "sha": "76e6b090a0b9b1e83b8e467d1b64f250f66c3f54",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked-cache: temporarily disable with $GIT_DISABLE_UNTRACKED_CACHE\n\nThis can be used to double check if results with untracked cache are\ncorrectly, compared to vanilla version. Untracked cache remains in\nindex, but not used.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/76e6b090a0b9b1e83b8e467d1b64f250f66c3f54"
                },
                {
                    "sha": "226c051adb0f64772f807287e130a6a546b95fbd",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "status: enable untracked cache\n\nupdate_index_if_able() is moved down so that the updated untracked\ncache could be written out.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/226c051adb0f64772f807287e130a6a546b95fbd"
                },
                {
                    "sha": "9e5972413b4873dc143c4046c6e74eb608ace32b",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "update-index: manually enable or disable untracked cache\n\nOverall time saving on \"git status\" is about 40% in the best case\nscenario, removing ..collect_untracked() as the most time consuming\nfunction. read and refresh index operations are now at the top (which\nshould drop when index-helper and/or watchman support is added). More\nnumbers and analysis below.\n\nwebkit.git\n==========\n\n169k files. 6k dirs. Lots of test data (i.e. not touched most of the\ntime)\n\nBase status\n-----------\n\nIndex version 4 in split index mode and cache-tree populated. No\nuntracked cache. It shows how time is consumed by \"git status\". The\nsame settings are used for other repos below.\n\n18:28:10.199679 builtin/commit.c:1394   performance: 0.000000451 s: cmd_status:setup\n18:28:10.474847 read-cache.c:1407       performance: 0.274873831 s: read_index\n18:28:10.475295 read-cache.c:1407       performance: 0.000000656 s: read_index\n18:28:10.728443 preload-index.c:131     performance: 0.253147487 s: read_index_preload\n18:28:10.741422 read-cache.c:1254       performance: 0.012868340 s: refresh_index\n18:28:10.752300 wt-status.c:623         performance: 0.010421357 s: wt_status_collect_changes_worktree\n18:28:10.762069 wt-status.c:629         performance: 0.009644748 s: wt_status_collect_changes_index\n18:28:11.601019 wt-status.c:632         performance: 0.838859547 s: wt_status_collect_untracked\n18:28:11.605939 builtin/commit.c:1421   performance: 0.004835004 s: cmd_status:update_index\n18:28:11.606580 trace.c:415             performance: 1.407878388 s: git command: 'git' 'status'\n\nPopulating status\n-----------------\n\nThis is after enabling untracked cache and the cache is still empty.\nWe see a slight increase in .._collect_untracked() and update_index\n(because new cache has to be written to $GIT_DIR/index).\n\n18:28:18.915213 builtin/commit.c:1394   performance: 0.000000326 s: cmd_status:setup\n18:28:19.197364 read-cache.c:1407       performance: 0.281901416 s: read_index\n18:28:19.197754 read-cache.c:1407       performance: 0.000000546 s: read_index\n18:28:19.451355 preload-index.c:131     performance: 0.253599607 s: read_index_preload\n18:28:19.464400 read-cache.c:1254       performance: 0.012935336 s: refresh_index\n18:28:19.475115 wt-status.c:623         performance: 0.010236920 s: wt_status_collect_changes_worktree\n18:28:19.486022 wt-status.c:629         performance: 0.010801685 s: wt_status_collect_changes_index\n18:28:20.362660 wt-status.c:632         performance: 0.876551366 s: wt_status_collect_untracked\n18:28:20.396199 builtin/commit.c:1421   performance: 0.033447969 s: cmd_status:update_index\n18:28:20.396939 trace.c:415             performance: 1.482695902 s: git command: 'git' 'status'\n\nPopulated status\n----------------\n\nAfter the cache is populated, wt_status_collect_untracked() drops 82%\nfrom 0.838s to 0.144s. Overall time drops 45%. Top offenders are now\nread_index() and read_index_preload().\n\n18:28:20.408605 builtin/commit.c:1394   performance: 0.000000457 s: cmd_status:setup\n18:28:20.692864 read-cache.c:1407       performance: 0.283980458 s: read_index\n18:28:20.693273 read-cache.c:1407       performance: 0.000000661 s: read_index\n18:28:20.958814 preload-index.c:131     performance: 0.265540254 s: read_index_preload\n18:28:20.972375 read-cache.c:1254       performance: 0.013437429 s: refresh_index\n18:28:20.983959 wt-status.c:623         performance: 0.011146646 s: wt_status_collect_changes_worktree\n18:28:20.993948 wt-status.c:629         performance: 0.009879094 s: wt_status_collect_changes_index\n18:28:21.138125 wt-status.c:632         performance: 0.144084737 s: wt_status_collect_untracked\n18:28:21.173678 builtin/commit.c:1421   performance: 0.035463949 s: cmd_status:update_index\n18:28:21.174251 trace.c:415             performance: 0.766707355 s: git command: 'git' 'status'\n\ngentoo-x86.git\n==============\n\nThis repository is a strange one with a balanced, wide and shallow\nworktree (about 100k files and 23k dirs) and no .gitignore in\nworktree. .._collect_untracked() time drops 88%, total time drops 56%.\n\nBase status\n-----------\n18:20:40.828642 builtin/commit.c:1394   performance: 0.000000496 s: cmd_status:setup\n18:20:41.027233 read-cache.c:1407       performance: 0.198130532 s: read_index\n18:20:41.027670 read-cache.c:1407       performance: 0.000000581 s: read_index\n18:20:41.171716 preload-index.c:131     performance: 0.144045594 s: read_index_preload\n18:20:41.179171 read-cache.c:1254       performance: 0.007320424 s: refresh_index\n18:20:41.185785 wt-status.c:623         performance: 0.006144638 s: wt_status_collect_changes_worktree\n18:20:41.192701 wt-status.c:629         performance: 0.006780184 s: wt_status_collect_changes_index\n18:20:41.991723 wt-status.c:632         performance: 0.798927029 s: wt_status_collect_untracked\n18:20:41.994664 builtin/commit.c:1421   performance: 0.002852772 s: cmd_status:update_index\n18:20:41.995458 trace.c:415             performance: 1.168427502 s: git command: 'git' 'status'\nPopulating status\n-----------------\n18:20:48.968848 builtin/commit.c:1394   performance: 0.000000380 s: cmd_status:setup\n18:20:49.172918 read-cache.c:1407       performance: 0.203734214 s: read_index\n18:20:49.173341 read-cache.c:1407       performance: 0.000000562 s: read_index\n18:20:49.320013 preload-index.c:131     performance: 0.146671391 s: read_index_preload\n18:20:49.328039 read-cache.c:1254       performance: 0.007921957 s: refresh_index\n18:20:49.334680 wt-status.c:623         performance: 0.006172020 s: wt_status_collect_changes_worktree\n18:20:49.342526 wt-status.c:629         performance: 0.007731746 s: wt_status_collect_changes_index\n18:20:50.257510 wt-status.c:632         performance: 0.914864222 s: wt_status_collect_untracked\n18:20:50.338371 builtin/commit.c:1421   performance: 0.080776477 s: cmd_status:update_index\n18:20:50.338900 trace.c:415             performance: 1.371462446 s: git command: 'git' 'status'\nPopulated status\n----------------\n18:20:50.351160 builtin/commit.c:1394   performance: 0.000000571 s: cmd_status:setup\n18:20:50.577358 read-cache.c:1407       performance: 0.225917338 s: read_index\n18:20:50.577794 read-cache.c:1407       performance: 0.000000617 s: read_index\n18:20:50.734140 preload-index.c:131     performance: 0.156345564 s: read_index_preload\n18:20:50.745717 read-cache.c:1254       performance: 0.011463075 s: refresh_index\n18:20:50.755176 wt-status.c:623         performance: 0.008877929 s: wt_status_collect_changes_worktree\n18:20:50.763768 wt-status.c:629         performance: 0.008471633 s: wt_status_collect_changes_index\n18:20:50.854885 wt-status.c:632         performance: 0.090988721 s: wt_status_collect_untracked\n18:20:50.857765 builtin/commit.c:1421   performance: 0.002789097 s: cmd_status:update_index\n18:20:50.858411 trace.c:415             performance: 0.508647673 s: git command: 'git' 'status'\n\nlinux-2.6\n=========\n\nReference repo. Not too big. .._collect_status() drops 84%. Total time\ndrops 42%.\n\nBase status\n-----------\n18:34:09.870122 builtin/commit.c:1394   performance: 0.000000385 s: cmd_status:setup\n18:34:09.943218 read-cache.c:1407       performance: 0.072871177 s: read_index\n18:34:09.943614 read-cache.c:1407       performance: 0.000000491 s: read_index\n18:34:10.004364 preload-index.c:131     performance: 0.060748102 s: read_index_preload\n18:34:10.008190 read-cache.c:1254       performance: 0.003714285 s: refresh_index\n18:34:10.012087 wt-status.c:623         performance: 0.002775446 s: wt_status_collect_changes_worktree\n18:34:10.016054 wt-status.c:629         performance: 0.003862140 s: wt_status_collect_changes_index\n18:34:10.214747 wt-status.c:632         performance: 0.198604837 s: wt_status_collect_untracked\n18:34:10.216102 builtin/commit.c:1421   performance: 0.001244166 s: cmd_status:update_index\n18:34:10.216817 trace.c:415             performance: 0.347670735 s: git command: 'git' 'status'\nPopulating status\n-----------------\n18:34:16.595102 builtin/commit.c:1394   performance: 0.000000456 s: cmd_status:setup\n18:34:16.666600 read-cache.c:1407       performance: 0.070992413 s: read_index\n18:34:16.667012 read-cache.c:1407       performance: 0.000000606 s: read_index\n18:34:16.729375 preload-index.c:131     performance: 0.062362492 s: read_index_preload\n18:34:16.732565 read-cache.c:1254       performance: 0.003075517 s: refresh_index\n18:34:16.736148 wt-status.c:623         performance: 0.002422201 s: wt_status_collect_changes_worktree\n18:34:16.739990 wt-status.c:629         performance: 0.003746618 s: wt_status_collect_changes_index\n18:34:16.948505 wt-status.c:632         performance: 0.208426710 s: wt_status_collect_untracked\n18:34:16.961744 builtin/commit.c:1421   performance: 0.013151887 s: cmd_status:update_index\n18:34:16.962233 trace.c:415             performance: 0.368537535 s: git command: 'git' 'status'\nPopulated status\n----------------\n18:34:16.970026 builtin/commit.c:1394   performance: 0.000000631 s: cmd_status:setup\n18:34:17.046235 read-cache.c:1407       performance: 0.075904673 s: read_index\n18:34:17.046644 read-cache.c:1407       performance: 0.000000681 s: read_index\n18:34:17.113564 preload-index.c:131     performance: 0.066920253 s: read_index_preload\n18:34:17.117281 read-cache.c:1254       performance: 0.003604055 s: refresh_index\n18:34:17.121115 wt-status.c:623         performance: 0.002508345 s: wt_status_collect_changes_worktree\n18:34:17.125089 wt-status.c:629         performance: 0.003871636 s: wt_status_collect_changes_index\n18:34:17.156089 wt-status.c:632         performance: 0.030895703 s: wt_status_collect_untracked\n18:34:17.169861 builtin/commit.c:1421   performance: 0.013686404 s: cmd_status:update_index\n18:34:17.170391 trace.c:415             performance: 0.201474531 s: git command: 'git' 'status'\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/9e5972413b4873dc143c4046c6e74eb608ace32b"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-12T22:41:50Z"
    },
    {
        "id": "2645422341",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 600478614,
            "size": 1000,
            "distinct_size": 0,
            "ref": "refs/heads/nd/untracked-cache",
            "head": "aeb6f8b3a2bbfd8b48a967139fbf4581e5345182",
            "before": "15812a74ec44ae44e1e20eb40605a3d213b256b2",
            "commits": [
                {
                    "sha": "dbdcac7d5c5eea314ec4c318a5e88cff427e9f0e",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "refs.c: add an err argument to delete_ref_loose\n\nAdd an err argument to delete_ref_loose so that we can pass a descriptive\nerror string back to the caller. Pass the err argument from transaction\ncommit to this function so that transaction users will have a nice error\nstring if the transaction failed due to delete_ref_loose.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/dbdcac7d5c5eea314ec4c318a5e88cff427e9f0e"
                },
                {
                    "sha": "db7516ab9f435e3ce86b257c6631fb4d2dfb12ae",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "refs.c: pass the ref log message to _create/delete/update instead of _commit\n\nChange the ref transaction API so that we pass the reflog message to the\ncreate/delete/update functions instead of to ref_transaction_commit.\nThis allows different reflog messages for each ref update in a multi-ref\ntransaction.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/db7516ab9f435e3ce86b257c6631fb4d2dfb12ae"
                },
                {
                    "sha": "7522e3dbcc3946d481e6b6ac59037b884cc0a2a6",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "rename_ref: don't ask read_ref_full where the ref came from\n\nWe call read_ref_full with a pointer to flags from rename_ref but since\nwe never actually use the returned flags we can just pass NULL here instead.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nReviewed-by: Michael Haggerty <mhagger@alum.mit.edu>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/7522e3dbcc3946d481e6b6ac59037b884cc0a2a6"
                },
                {
                    "sha": "8a9df90d9a726fa9b1a1ebd13b9e43409e18c606",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "refs.c: refuse to lock badly named refs in lock_ref_sha1_basic\n\nMove the check for check_refname_format from lock_any_ref_for_update to\nlock_ref_sha1_basic.  At some later stage we will get rid of\nlock_any_ref_for_update completely.  This has no visible impact to callers\nexcept for the inability to lock badly named refs, which is not possible\ntoday already for other reasons.(*)\n\nKeep lock_any_ref_for_update as a no-op wrapper.  It is the public facing\nversion of this interface and keeping it as a separate function will make\nit easier to experiment with the internal lock_ref_sha1_basic signature.\n\n(*) For example, if lock_ref_sha1_basic checks the refname format and\nrefuses to lock badly named refs, it will not be possible to delete\nsuch refs because the first step of deletion is to lock the ref.  We\ncurrently already fail in that case because these refs are not recognized\nto exist:\n\n $ cp .git/refs/heads/master .git/refs/heads/echo...\\*\\*\n $ git branch -D .git/refs/heads/echo...\\*\\*\n error: branch '.git/refs/heads/echo...**' not found.\n\nThis has been broken for a while.  Later patches in the series will start\nrepairing the handling of badly named refs.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nReviewed-by: Michael Haggerty <mhagger@alum.mit.edu>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/8a9df90d9a726fa9b1a1ebd13b9e43409e18c606"
                },
                {
                    "sha": "5d94a1b03318d14847a40f233560c2a87fb16cfa",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "refs.c: call lock_ref_sha1_basic directly from commit\n\nSkip using the lock_any_ref_for_update wrapper and call lock_ref_sha1_basic\ndirectly from the commit function.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nReviewed-by: Michael Haggerty <mhagger@alum.mit.edu>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5d94a1b03318d14847a40f233560c2a87fb16cfa"
                },
                {
                    "sha": "5fe7d825da8af83a9a3b9bc7f3295f836b6e3a75",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "refs.c: pass a list of names to skip to is_refname_available\n\nChange is_refname_available to take a list of strings to exclude when\nchecking for conflicts instead of just one single name. We can already\nexclude a single name for the sake of renames. This generalizes that support.\n\nref_transaction_commit already tracks a set of refs that are being deleted\nin an array.  This array is then used to exclude refs from being written to\nthe packed-refs file.  At some stage we will want to change this array to a\nstruct string_list and then we can pass it to is_refname_available via the\ncall to lock_ref_sha1_basic.  That will allow us to perform transactions\nthat perform multiple renames as long as there are no conflicts within the\nstarting or ending state.\n\nFor example, that would allow a single transaction that contains two\nrenames that are both individually conflicting:\n\n   m -> n/n\n   n -> m/m\n\nNo functional change intended yet.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5fe7d825da8af83a9a3b9bc7f3295f836b6e3a75"
                },
                {
                    "sha": "28e6a97e39edb84599693db971e36d793d36e413",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "refs.c: ref_transaction_commit: distinguish name conflicts from other errors\n\nIn _commit, ENOTDIR can happen in the call to lock_ref_sha1_basic, either\nwhen we lstat the new refname or if the name checking function reports that\nthe same type of conflict happened.  In both cases, it means that we can not\ncreate the new ref due to a name conflict.\n\nStart defining specific return codes for _commit.  TRANSACTION_NAME_CONFLICT\nrefers to a failure to create a ref due to a name conflict with another ref.\nTRANSACTION_GENERIC_ERROR is for all other errors.\n\nWhen \"git fetch\" is creating refs, name conflicts differ from other errors in\nthat they are likely to be resolved by running \"git remote prune <remote>\".\n\"git fetch\" currently inspects errno to decide whether to give that advice.\nOnce it switches to the transaction API, it can check for\nTRANSACTION_NAME_CONFLICT instead.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/28e6a97e39edb84599693db971e36d793d36e413"
                },
                {
                    "sha": "cd94f765720e32ea0bf72996c8dc7dd0b1cc30d0",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "fetch.c: change s_update_ref to use a ref transaction\n\nChange s_update_ref to use a ref transaction for the ref update.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/cd94f765720e32ea0bf72996c8dc7dd0b1cc30d0"
                },
                {
                    "sha": "aae383db8c384dc46abe199899235f67c838e601",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "refs.c: make write_ref_sha1 static\n\nNo external users call write_ref_sha1 any more so let's declare it static.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/aae383db8c384dc46abe199899235f67c838e601"
                },
                {
                    "sha": "7695d118e5a3c9c6fcb4cb15eb766a1c57422aed",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "refs.c: change resolve_ref_unsafe reading argument to be a flags field\n\nresolve_ref_unsafe takes a boolean argument for reading (a nonexistent ref\nresolves successfully for writing but not for reading).  Change this to be\na flags field instead, and pass the new constant RESOLVE_REF_READING when\nwe want this behaviour.\n\nWhile at it, swap two of the arguments in the function to put output\narguments at the end.  As a nice side effect, this ensures that we can\ncatch callers that were unaware of the new API so they can be audited.\n\nGive the wrapper functions resolve_refdup and read_ref_full the same\ntreatment for consistency.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/7695d118e5a3c9c6fcb4cb15eb766a1c57422aed"
                },
                {
                    "sha": "014e7db3f5563a61cefbe1f6f5747931c799a37e",
                    "author": {
                        "email": "gitster@pobox.com",
                        "name": "Junio C Hamano"
                    },
                    "message": "reflog test: test interaction with detached HEAD\n\nA proposed patch produced broken HEAD reflog entries when checking out\nanything other than a branch.  The testsuite still passed, so it took\na few days for the bug to be noticed.\n\nAdd tests checking the content of the reflog after detaching and\nreattaching HEAD so we don't have to rely on manual testing to catch\nsuch problems in the future.\n\n[jn: using 'log -g --format=%H' instead of parsing --oneline output,\n resetting state in each test so they can be safely reordered or\n skipped]\n\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nReviewed-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/014e7db3f5563a61cefbe1f6f5747931c799a37e"
                },
                {
                    "sha": "62a2d52514aed2b684409cb48e40e0cd14335d1b",
                    "author": {
                        "email": "jrnieder@gmail.com",
                        "name": "Jonathan Nieder"
                    },
                    "message": "branch -d: avoid repeated symref resolution\n\nIf a repository gets in a broken state with too much symref nesting,\nit cannot be repaired with \"git branch -d\":\n\n $ git symbolic-ref refs/heads/nonsense refs/heads/nonsense\n $ git branch -d nonsense\n error: branch 'nonsense' not found.\n\nWorse, \"git update-ref --no-deref -d\" doesn't work for such repairs\neither:\n\n $ git update-ref -d refs/heads/nonsense\n error: unable to resolve reference refs/heads/nonsense: Too many levels of symbolic links\n\nFix both by teaching resolve_ref_unsafe a new RESOLVE_REF_NO_RECURSE\nflag and passing it when appropriate.\n\nCallers can still read the value of a symref (for example to print a\nmessage about it) with that flag set --- resolve_ref_unsafe will\nresolve one level of symrefs and stop there.\n\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nReviewed-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/62a2d52514aed2b684409cb48e40e0cd14335d1b"
                },
                {
                    "sha": "18f29fc61ed88145a0664657c3cea9e9732ea5e8",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "branch -d: simplify by using RESOLVE_REF_READING\n\nWhen \"git branch -d\" reads the branch it is about to delete, it used\nto avoid passing the RESOLVE_REF_READING ('treat missing ref as\nerror') flag because a symref pointing to a nonexistent ref would show\nup as missing instead of as something that could be deleted.  To check\nif a ref is actually missing, we then check\n\n - is it a symref?\n - if not, did it resolve to null_sha1?\n\nNow we pass RESOLVE_REF_NO_RECURSE and the correct information is\nreturned for a symref even when it points to a missing ref.  Simplify\nby relying on RESOLVE_REF_READING.\n\nNo functional change intended.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/18f29fc61ed88145a0664657c3cea9e9732ea5e8"
                },
                {
                    "sha": "f3cc52d840418c1a38bb4ae9a09a479e77d95e77",
                    "author": {
                        "email": "jrnieder@gmail.com",
                        "name": "Jonathan Nieder"
                    },
                    "message": "packed-ref cache: forbid dot-components in refnames\n\nSince v1.7.9-rc1~10^2 (write_head_info(): handle \"extra refs\" locally,\n2012-01-06), this trick to keep track of \".have\" refs that are only\nvalid on the wire and not on the filesystem is not needed any more.\n\nSimplify by removing support for the REFNAME_DOT_COMPONENT flag.\n\nThis means we'll be slightly stricter with invalid refs found in a\npacked-refs file or during clone.  read_loose_refs() already checks\nfor and skips refnames with .components so it is not affected.\n\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nReviewed-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/f3cc52d840418c1a38bb4ae9a09a479e77d95e77"
                },
                {
                    "sha": "8159f4af7d21e106ed04d69c428b395701b94205",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "test: put tests for handling of bad ref names in one place\n\nThere's no straightforward way to grep for all tests dealing with\ninvalid refs.  Put them in a single test script so it is easy to see\nwhat functionality has not been exercised with bad ref names yet.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/8159f4af7d21e106ed04d69c428b395701b94205"
                },
                {
                    "sha": "d0f810f0bc0d6b51722b400f70c2590713f168e8",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "refs.c: allow listing and deleting badly named refs\n\nWe currently do not handle badly named refs well:\n\n  $ cp .git/refs/heads/master .git/refs/heads/master.....@\\*@\\\\.\n  $ git branch\n    fatal: Reference has invalid format: 'refs/heads/master.....@*@\\.'\n  $ git branch -D master.....@\\*@\\\\.\n    error: branch 'master.....@*@\\.' not found.\n\nUsers cannot recover from a badly named ref without manually finding\nand deleting the loose ref file or appropriate line in packed-refs.\nMaking that easier will make it easier to tweak the ref naming rules\nin the future, for example to forbid shell metacharacters like '`'\nand '\"', without putting people in a state that is hard to get out of.\n\nSo allow \"branch --list\" to show these refs and allow \"branch -d/-D\"\nand \"update-ref -d\" to delete them.  Other commands (for example to\nrename refs) will continue to not handle these refs but can be changed\nin later patches.\n\nDetails:\n\nIn resolving functions, refuse to resolve refs that don't pass the\ngit-check-ref-format(1) check unless the new RESOLVE_REF_ALLOW_BAD_NAME\nflag is passed.  Even with RESOLVE_REF_ALLOW_BAD_NAME, refuse to\nresolve refs that escape the refs/ directory and do not match the\npattern [A-Z_]* (think \"HEAD\" and \"MERGE_HEAD\").\n\nIn locking functions, refuse to act on badly named refs unless they\nare being deleted and either are in the refs/ directory or match [A-Z_]*.\n\nJust like other invalid refs, flag resolved, badly named refs with the\nREF_ISBROKEN flag, treat them as resolving to null_sha1, and skip them\nin all iteration functions except for for_each_rawref.\n\nFlag badly named refs (but not symrefs pointing to badly named refs)\nwith a REF_BAD_NAME flag to make it easier for future callers to\nnotice and handle them specially.  For example, in a later patch\nfor-each-ref will use this flag to detect refs whose names can confuse\ncallers parsing for-each-ref output.\n\nIn the transaction API, refuse to create or update badly named refs,\nbut allow deleting them (unless they try to escape refs/ and don't match\n[A-Z_]*).\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/d0f810f0bc0d6b51722b400f70c2590713f168e8"
                },
                {
                    "sha": "971c41c71728d057115b105f427202f98565f933",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "for-each-ref: skip and warn about broken ref names\n\nPrint a warning message for any bad ref names we find in the repo and\nskip them so callers don't have to deal with parsing them.\n\nIt might be useful in the future to have a flag where we would not\nskip these refs for those callers that want to and are prepared (for\nexample by using a --format argument with %0 as a delimiter after the\nref name).\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/971c41c71728d057115b105f427202f98565f933"
                },
                {
                    "sha": "2ebb49ca8ac34afb0ffe00e4bceac73e8c825ef1",
                    "author": {
                        "email": "sahlberg@google.com",
                        "name": "Ronnie Sahlberg"
                    },
                    "message": "remote rm/prune: print a message when writing packed-refs fails\n\nUntil v2.1.0-rc0~22^2~11 (refs.c: add an err argument to\nrepack_without_refs, 2014-06-20), repack_without_refs forgot to\nprovide an error message when commit_packed_refs fails.  Even today,\nit only provides a message for callers that pass a non-NULL err\nparameter.  Internal callers in refs.c pass non-NULL err but\n\"git remote\" does not.\n\nThat means that \"git remote rm\" and \"git remote prune\" can fail\nwithout printing a message about why.  Fix them by passing in a\nnon-NULL err parameter and printing the returned message.\n\nThis is the last caller to a ref handling function passing err ==\nNULL.  A later patch can drop support for err == NULL, avoiding such\nproblems in the future.\n\nSigned-off-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nReviewed-by: Michael Haggerty <mhagger@alum.mit.edu>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/2ebb49ca8ac34afb0ffe00e4bceac73e8c825ef1"
                },
                {
                    "sha": "5a603b046351894a3c892d5bd6948fcee1bee5ab",
                    "author": {
                        "email": "jrnieder@gmail.com",
                        "name": "Jonathan Nieder"
                    },
                    "message": "refs.c: do not permit err == NULL\n\nSome functions that take a strbuf argument to append an error treat\n!err as an indication that the message should be suppressed (e.g.,\nref_update_reject_duplicates).  Others write the message to stderr on\n!err (e.g., repack_without_refs).  Others crash (e.g.,\nref_transaction_update).\n\nSome of these behaviors are for historical reasons and others were\naccidents.  Luckily no callers pass err == NULL any more.  Simplify\nby consistently requiring the strbuf argument.\n\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nReviewed-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5a603b046351894a3c892d5bd6948fcee1bee5ab"
                },
                {
                    "sha": "fb43bd1cd187bcd29312df3b0394a457d524906d",
                    "author": {
                        "email": "jrnieder@gmail.com",
                        "name": "Jonathan Nieder"
                    },
                    "message": "lockfile: remove unable_to_lock_error\n\nThe former caller uses unable_to_lock_message now.\n\nSigned-off-by: Jonathan Nieder <jrnieder@gmail.com>\nReviewed-by: Ronnie Sahlberg <sahlberg@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/fb43bd1cd187bcd29312df3b0394a457d524906d"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-12T22:41:50Z"
    },
    {
        "id": "2645422326",
        "type": "CreateEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "ref": "stock",
            "ref_type": "branch",
            "master_branch": "master",
            "description": "Git - the stupid content tracker - This is a publish-only repository and all pull requests are ignored. Please follow Documentation/SubmittingPatches procedure for any of your improvements.",
            "pusher_type": "user"
        },
        "public": true,
        "created_at": "2015-03-12T22:41:50Z"
    },
    {
        "id": "2645422134",
        "type": "PushEvent",
        "actor": {
            "id": 54884,
            "login": "gitster",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gitster",
            "avatar_url": "https://avatars.githubusercontent.com/u/54884?"
        },
        "repo": {
            "id": 385586,
            "name": "gitster/git",
            "url": "https://api.github.com/repos/gitster/git"
        },
        "payload": {
            "push_id": 600478528,
            "size": 45,
            "distinct_size": 0,
            "ref": "refs/heads/jch",
            "head": "de9340dbbd41cd9690283c5c677c01535b3d75d5",
            "before": "5144a6fe1ecac7a837c6df28a4e0baac033ee52b",
            "commits": [
                {
                    "sha": "6a536e2076f02a98e0d6403ff68f3acf717fa1c4",
                    "author": {
                        "email": "karthik.188@gmail.com",
                        "name": "Karthik Nayak"
                    },
                    "message": "git: treat \"git -C '<path>'\" as a no-op when <path> is empty\n\n'git -C \"\"' unhelpfully dies with error \"Cannot change to ''\",\nwhereas the shell treats `cd \"\"' as a no-op.  Taking the shell's\nbehavior as a precedent, teach git to treat `-C \"\"' as a no-op, as\nwell.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nHelped-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/6a536e2076f02a98e0d6403ff68f3acf717fa1c4"
                },
                {
                    "sha": "dd059c6c07ede0486da5f9d02619687ae3108773",
                    "author": {
                        "email": "peff@peff.net",
                        "name": "Jeff King"
                    },
                    "message": "tag: fix some mis-organized options in \"-h\" listing\n\nRunning \"git tag -h\" currently prints:\n\n  [...]\n  Tag creation options\n      [...]\n      --column[=<style>]    show tag list in columns\n      --sort <type>         sort tags\n\n  Tag listing options\n      --contains <commit>   print only tags that contain the commit\n      --points-at <object>  print only tags of the object\n\nThe \"--column\" and \"--sort\" options should go under the \"Tag listing\" group.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/dd059c6c07ede0486da5f9d02619687ae3108773"
                },
                {
                    "sha": "55fe6f51f41f254d3d87994d18bff04664aa013b",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "dir.c: optionally compute sha-1 of a .gitignore file\n\nThis is not used anywhere yet. But the goal is to compare quickly if a\n.gitignore file has changed when we have the SHA-1 of both old (cached\nsomewhere) and new (from index or a tree) versions.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nHelped-by: Torsten Bögershausen <tboegi@web.de>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/55fe6f51f41f254d3d87994d18bff04664aa013b"
                },
                {
                    "sha": "0dcb8d7fe0ec2687d4a6ae201ae72907d862437c",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: record .gitignore information and dir hierarchy\n\nThe idea is if we can capture all input and (non-rescursive) output of\nread_directory_recursive(), and can verify later that all the input is\nthe same, then the second r_d_r() should produce the same output as in\nthe first run.\n\nThe requirement for this to work is stat info of a directory MUST\nchange if an entry is added to or removed from that directory (and\nshould not change often otherwise). If your OS and filesystem do not\nmeet this requirement, untracked cache is not for you. Most file\nsystems on *nix should be fine. On Windows, NTFS is fine while FAT may\nnot be [1] even though FAT on Linux seems to be fine.\n\nThe list of input of r_d_r() is in the big comment block in dir.h. In\nshort, the output of a directory (not counting subdirs) mainly depends\non stat info of the directory in question, all .gitignore leading to\nit and the check_only flag when r_d_r() is called recursively. This\npatch records all this info (and the output) as r_d_r() runs.\n\nTwo hash_sha1_file() are required for $GIT_DIR/info/exclude and\ncore.excludesfile unless their stat data matches. hash_sha1_file() is\nonly needed when .gitignore files in the worktree are modified,\notherwise their SHA-1 in index is used (see the previous patch).\n\nWe could store stat data for .gitignore files so we don't have to\nrehash them if their content is different from index, but I think\n.gitignore files are rarely modified, so not worth extra cache data\n(and hashing penalty read-cache.c:verify_hdr(), as we will be storing\nthis as an index extension).\n\nThe implication is, if you change .gitignore, you better add it to the\nindex soon or you lose all the benefit of untracked cache because a\nmodified .gitignore invalidates all subdirs recursively. This is\nespecially bad for .gitignore at root.\n\nThis cached output is about untracked files only, not ignored files\nbecause the number of tracked files is usually small, so small cache\noverhead, while the number of ignored files could go really high\n(e.g. *.o files mixing with source code).\n\n[1] \"Description of NTFS date and time stamps for files and folders\"\n    http://support.microsoft.com/kb/299648\n\nHelped-by: Torsten Bögershausen <tboegi@web.de>\nHelped-by: David Turner <dturner@twopensource.com>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/0dcb8d7fe0ec2687d4a6ae201ae72907d862437c"
                },
                {
                    "sha": "ccad261f07900b55029f3fd42a9ec8f17229808f",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: initial untracked cache validation\n\nMake sure the starting conditions and all global exclude files are\ngood to go. If not, either disable untracked cache completely, or wipe\nout the cache and start fresh.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/ccad261f07900b55029f3fd42a9ec8f17229808f"
                },
                {
                    "sha": "5ebf79ad4b308c678bd9623dd906c01bb0ab7e0f",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: invalidate dirs recursively if .gitignore changes\n\nIt's easy to see that if an existing .gitignore changes, its SHA-1\nwould be different and invalidate_gitignore() is called.\n\nIf .gitignore is removed, add_excludes() will treat it like an empty\n.gitignore, which again should invalidate the cached directory data.\n\nif .gitignore is added, lookup_untracked() already fills initial\n.gitignore SHA-1 as \"empty file\", so again invalidate_gitignore() is\ncalled.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/5ebf79ad4b308c678bd9623dd906c01bb0ab7e0f"
                },
                {
                    "sha": "cf7c61484f77f6212b52c7e9fdce7bfbbb4eb854",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: make a wrapper around {open,read,close}dir()\n\nThis allows us to feed different info to read_directory_recursive()\nbased on untracked cache in the next patch.\n\nHelped-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/cf7c61484f77f6212b52c7e9fdce7bfbbb4eb854"
                },
                {
                    "sha": "91a2288b5f63fba82e912dca475154d5b9dd233a",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: record/validate dir mtime and reuse cached output\n\nThe main readdir loop in read_directory_recursive() is replaced with a\nnew one that checks if cached results of a directory is still valid.\n\nIf a file is added or removed from the index, the containing directory\nis invalidated (but not its subdirs). If directory's mtime is changed,\nthe same happens. If a .gitignore is updated, the containing directory\nand all subdirs are invalidated recursively. If dir_struct#flags or\nother conditions change, the cache is ignored.\n\nIf a directory is invalidated, we opendir/readdir/closedir and run the\nexclude machinery on that directory listing as usual. If untracked\ncache is also enabled, we'll update the cache along the way. If a\ndirectory is validated, we simply pull the untracked listing out from\nthe cache. The cache also records the list of direct subdirs that we\nhave to recurse in. Fully excluded directories are seen as \"untracked\nfiles\".\n\nIn the best case when no dirs are invalidated, read_directory()\nbecomes a series of\n\n  stat(dir), open(.gitignore), fstat(), read(), close() and optionally\n  hash_sha1_file()\n\nFor comparison, standard read_directory() is a sequence of\n\n  opendir(), readdir(), open(.gitignore), fstat(), read(), close(), the\n  expensive last_exclude_matching() and closedir().\n\nWe already try not to open(.gitignore) if we know it does not exist,\nso open/fstat/read/close sequence does not apply to every\ndirectory. The sequence could be reduced further, as noted in\nprep_exclude() in another patch. So in theory, the entire best-case\nread_directory sequence could be reduced to a series of stat() and\nnothing else.\n\nThis is not a silver bullet approach. When you compile a C file, for\nexample, the old .o file is removed and a new one with the same name\ncreated, effectively invalidating the containing directory's cache\n(but not its subdirectories). If your build process touches every\ndirectory, this cache adds extra overhead for nothing, so it's a good\nidea to separate generated files from tracked files.. Editors may use\nthe same strategy for saving files. And of course you're out of luck\nrunning your repo on an unsupported filesystem and/or operating system.\n\nHelped-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/91a2288b5f63fba82e912dca475154d5b9dd233a"
                },
                {
                    "sha": "26cb0182b8b2e119f469750b3511fac4624f6667",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: mark what dirs should be recursed/saved\n\nIf we redo this thing in a functional style, we would have one struct\nuntracked_dir as input tree and another as output. The input is used\nfor verification. The output is a brand new tree, reflecting current\nworktree.\n\nBut that means recreate a lot of dir nodes even if a lot could be\nshared between input and output trees in good cases. So we go with the\nmessy but efficient way, combining both input and output trees into\none. We need a way to know which node in this combined tree belongs to\nthe output. This is the purpose of this \"recurse\" flag.\n\n\"valid\" bit can't be used for this because it's about data of the node\nexcept the subdirs. When we invalidate a directory, we want to keep\ncached data of the subdirs intact even though we don't really know\nwhat subdir still exists (yet). Then we check worktree to see what\nactual subdir remains on disk. Those will have 'recurse' bit set\nagain. If cached data for those are still valid, we may be able to\navoid computing exclude files for them. Those subdirs that are deleted\nwill have 'recurse' remained clear and their 'valid' bits do not\nmatter.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/26cb0182b8b2e119f469750b3511fac4624f6667"
                },
                {
                    "sha": "27b099ae8742f014700edba92036db288750e44a",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: don't open non-existent .gitignore\n\nThis cuts down a signficant number of open(.gitignore) because most\ndirectories usually don't have .gitignore files.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/27b099ae8742f014700edba92036db288750e44a"
                },
                {
                    "sha": "be0d9d532326a81d761913e3ec9e2e7c62eeca7b",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "ewah: add convenient wrapper ewah_serialize_strbuf()\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/be0d9d532326a81d761913e3ec9e2e7c62eeca7b"
                },
                {
                    "sha": "83c094ad0dd2104adbbec034f802dceb1d052981",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: save to an index extension\n\nHelped-by: Stefan Beller <sbeller@google.com>\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/83c094ad0dd2104adbbec034f802dceb1d052981"
                },
                {
                    "sha": "f9e6c649589e0940ccb82821107fb658277ed86b",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: load from UNTR index extension\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/f9e6c649589e0940ccb82821107fb658277ed86b"
                },
                {
                    "sha": "e931371a8f1164185486a1f5fdaaa708b4a6217c",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: invalidate at index addition or removal\n\nIdeally we should implement untracked_cache_remove_from_index() and\nuntracked_cache_add_to_index() so that they update untracked cache\nright away instead of invalidating it and wait for read_directory()\nnext time to deal with it. But that may need some more work in\nunpack-trees.c. So stay simple as the first step.\n\nThe new call in add_index_entry_with_check() may look strange because\nnew calls usually stay close to cache_tree_invalidate_path(). We do it\na bit later than c_t_i_p() in this function because if it's about\nreplacing the entry with the same name, we don't care (but cache-tree\ndoes).\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/e931371a8f1164185486a1f5fdaaa708b4a6217c"
                },
                {
                    "sha": "2bb4cda1987afe6911a1c193283213babda328d2",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "read-cache.c: split racy stat test to a separate function\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/2bb4cda1987afe6911a1c193283213babda328d2"
                },
                {
                    "sha": "ed4efab1b17e883b761b4482c40c04a4529be8f9",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: avoid racy timestamps\n\nWhen a directory is updated within the same second that its timestamp\nis last saved, we cannot realize the directory has been updated by\nchecking timestamps. Assume the worst (something is update). See\n29e4d36 (Racy GIT - 2005-12-20) for more information.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/ed4efab1b17e883b761b4482c40c04a4529be8f9"
                },
                {
                    "sha": "c9ccb5d327bd9259ca6cceb9d87df9eb2cba2e9d",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: print stats with $GIT_TRACE_UNTRACKED_STATS\n\nThis could be used to verify correct behavior in tests\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/c9ccb5d327bd9259ca6cceb9d87df9eb2cba2e9d"
                },
                {
                    "sha": "1bbb3dba3fbf733db45f073ddafe89f5972c516a",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked cache: mark index dirty if untracked cache is updated\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/1bbb3dba3fbf733db45f073ddafe89f5972c516a"
                },
                {
                    "sha": "76e6b090a0b9b1e83b8e467d1b64f250f66c3f54",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "untracked-cache: temporarily disable with $GIT_DISABLE_UNTRACKED_CACHE\n\nThis can be used to double check if results with untracked cache are\ncorrectly, compared to vanilla version. Untracked cache remains in\nindex, but not used.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/76e6b090a0b9b1e83b8e467d1b64f250f66c3f54"
                },
                {
                    "sha": "226c051adb0f64772f807287e130a6a546b95fbd",
                    "author": {
                        "email": "pclouds@gmail.com",
                        "name": "Nguyễn Thái Ngọc Duy"
                    },
                    "message": "status: enable untracked cache\n\nupdate_index_if_able() is moved down so that the updated untracked\ncache could be written out.\n\nSigned-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
                    "distinct": false,
                    "url": "https://api.github.com/repos/gitster/git/commits/226c051adb0f64772f807287e130a6a546b95fbd"
                }
            ]
        },
        "public": true,
        "created_at": "2015-03-12T22:41:45Z"
    }
]
